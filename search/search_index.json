{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"home/","title":"Benvenut\u0259!","text":"<p>\ud83d\udc68\u200d\ud83d\udcbb PythonBiellaGroup \u00e8 una community legata a Python che si pone l\u2019obiettivo di studiare e apprendere l\u2019omonimo linguaggio di programmazione in tutte le sue accezioni.</p>"},{"location":"home/#materiale","title":"\ud83d\ude80 Materiale","text":"<p>Crediamo che la conoscenza debba essere condivisa ed \u00e9 per questo che condividiamo tutto il materiale (codice,notebook,slides,esercizi) che viene proposto durante i meetup sul nostro GitHub in modo che possa essere accessibile a chiunque</p> <p>All'interno potrai trovare:</p> <ul> <li>Tutto il materiale utilizzato durante i meetup</li> <li>Esercizi fatti dalla community, proponi la tua soluzione!</li> <li>Progetti sviluppati dalla community:<ul> <li>Bear: a template for a modern python project based on cookiecutter</li> <li>Community website: website for the community based on MkDocs</li> </ul> </li> </ul>"},{"location":"home/#contatti","title":"\u260e\ufe0f Contatti","text":"<p>Puoi trovare tutti i nostri contatti, materiale e informazioni su questo link</p> <p>In particolare puoi trovare informazioni su:</p> <ul> <li>Canale Telegram che usiamo per comunicare e discutere all\u2019interno della community</li> <li>Canale Youtube con tutti i video e le registrazioni delle serate</li> <li>Github: con tutto il nostro codice e materiale open source</li> <li>Eventbrite: dove potrai ottenere i biglietti per accedere ai nostri meetup live</li> <li>Tutti i nostri canali e contatti social</li> </ul>"},{"location":"home/#vuoi-aiutarci-ti-interessa-il-nostro-progetto","title":"\ud83e\udd32 Vuoi aiutarci? Ti interessa il nostro progetto?","text":"<p>Contribuisci alla community!</p> <ul> <li> <p>Proponi un tuo intervento su quello che ti piace</p> </li> <li> <p>Aiutarci con il nostro blog, social, community e repository</p> </li> <li> <p>Contattaci su Telegram!</p> </li> </ul> <p>Ma soprattutto: Grazie di essere qui!</p>"},{"location":"home/codice_condotta/","title":"Codice di condotta","text":"<p>PythonBiellaGroup \u00e9 una community Italiana che ha come obiettivo la condivisione, la divulgazione e l'approfondimento della programmazione, del mondo del software e della tecnologia, pi\u00f9 nello specifico a tutto quello che ruota attorno al mondo Python. La community \u00e8 composta da appassionat\u0259 del mondo della programmazione o semplicemente da persone che vogliono imparare, scoprire cose nuove e mettersi in gioco. Con lo scopo di garantire un ambiente stimolante ed inclusivo descriviamo il seguente codice di condotta con il fine di garantire ad ogni membro della community la possibilit\u00e0 di trovare un luogo sicuro, rispettoso e accogliente, senza incorrere in forme di molestia o esclusione basate su: razza, sesso, orientamenti politico-religiosi o altre potenziali categorie discriminatorie.</p> <p>Oltre a questo nel codice di condotta sono presenti anche suggerimenti su come ogni membro pu\u00f2 contribuire con la sua partecipazione a rendere migliore la community.</p> <p> Entrando nella community di PythonBiellaGroup accetti di seguire il seguente codice di condotta </p>"},{"location":"home/codice_condotta/#linee-guida-generali","title":"Linee guida generali","text":"<ol> <li> <p>La Community ha lo scopo di imparare e approfondire la conoscenza (in tutte le sue accezioni) del linguaggio di programmazione Python e al mondo del software e della tecnologia. Ogni membro \u00e8 libero di partecipare come pi\u00f9 si sente libero alle iniziative della community sempre nel rispetto delle altre persone e lasciando spazio alle idee e opinioni altrui.</p> </li> <li> <p>Ogni idea e opinione deve essere espressa secondo i principi di rispetto e buona creanza derivanti dal rispetto della persona umana e del vivere comune.</p> </li> <li> <p>L\u2019evento pi\u00f9 importante per la community \u00e9 il meetup live settimanale dove \u00e8 possibile assistere ad un talk condotto da uno speaker. Ogni membro della community \u00e8 invitato a fare domande e a condividere le sue riflessioni in merito al talk trattato. E\u2019 anche possibile per gli stessi membri della community proporsi per fare gli speaker ad uno o pi\u00f9 talk.</p> </li> <li> <p>PythonBiellaGroup non \u00e8 affiliato con alcun vendor tecnologico pertanto \u00e8 possibile parlare liberamente di qualsiasi prodotto software. La community in ogni caso sostiene e incoraggia l\u2019utilizzo di software open-source.</p> </li> <li> <p>Ogni membro della community ha un diverso livello di conoscenza relativamente alle tematiche trattate durante le discussioni quindi certi argomenti potrebbero risultare scontati o banali ai pi\u00f9 esperti ma essendo che lo scopo del gruppo \u00e8 imparare insieme ogni discussione dovr\u00e0 essere rispettata e supportata.</p> </li> <li> <p>Le molestie di alcun genere non sono tollerate. Le molestie includono commenti offensivi verbali legati a genere, orientamento sessuale, disabilit\u00e0, aspetto fisico, dimensione corporea, razza, religione, immagini sessuali in spazi pubblici, intimidazioni intenzionali, stalking, inseguimenti, fotografie o registrazioni moleste, interruzione continuata di presentazioni o altri eventi, contatto fisico inappropriato e attenzioni sessuali sgradite.</p> </li> <li> <p>Non \u00e8 consentito un linguaggio blasfemo.</p> </li> <li> <p>E\u2019 vietato inviare o condividere qualsiasi tipo di materiale che possa recare danno o ledere la dignit\u00e0 della propria o altrui persona umana. A titolo esemplificativo ma non esaustivo sono pertanto vietati contenuti e commenti: uso di droghe, pirateria, hacking, warez, razzisti, offensivi, volgari, discriminatori, blasfemi, pornografici, sessisti, dai toni arroganti o denigratori, istiganti a odio e/o violenza, immagini o siti tratti dal Web senza che se ne abbia autorizzazione o la propriet\u00e0 intellettuale.</p> </li> <li> <p>Tutti i contenuti che invogliano, contengono o generano attivit\u00e0 illegali sono vietati. Inoltre tutti i contenuti che violano espressamente diritti di copyright sono vietati</p> </li> <li> <p>E\u2019 responsabilit\u00e0 degli Amministratori valutare e deliberare, a loro insindacabile giudizio, in merito alle violazioni commesse dai partecipanti alla Community.</p> </li> <li> <p>Ogni delibera volta alla correzione di eventuali violazioni non pu\u00f2 essere comminata o associabile al pagamento di sanzioni in denaro. Le delibere correttive devono essere proporzionate alla violazione.</p> </li> <li> <p>Il Partecipante che si trovasse a ricevere un avviso in merito ad una sua violazione, \u00e8 tenuto a correggere la propria condotta in modo immediato e tempestivo ottemperando, al contempo, ad eventuali richieste correttive avanzate dagli Amministratori.</p> </li> <li> <p>Ogni partecipante alla community che dovesse ricevere o riscontrasse mancanze o violazioni lesive della propria o altrui dignit\u00e0 \u00e8 invitato a comunicare tempestivamente l\u2019accaduto agli Amministratori.</p> </li> </ol>"},{"location":"home/codice_condotta/#social","title":"Social","text":"<ol> <li> <p>Non inviare alcunch\u00e9 che possa essere percepito come discriminatorio, volgare od offensivo; ad esempio, contenuti razzisti, sessisti, pornografici, blasfemi, volgari, arroganti, sgradevoli o minacciosi e immagini o siti Web</p> </li> <li> <p>Non inviare messaggi che supportino o tollerino alcuna attivit\u00e0 illegale, ad esempio uso di droghe, pirateria, hacking, warez, ecc.</p> </li> <li> <p>Anche sui social valgono tutte le norme contenute nelle linee guida generali</p> </li> <li> <p>Non utilizzare bot o algoritmi per diffondere messaggi o contenuti di qualsiasi tipo che violino le regole della community sopra elencati e che volontariamente facciano spam agli utenti ad eccezione degli strumenti di moderazione automatica dei vari strumenti di comunicazione.</p> </li> </ol>"},{"location":"home/codice_condotta/#condivisione-materiale-e-contenuti","title":"Condivisione materiale e contenuti","text":"<ol> <li> <p>E' possibile condividere materiale che sia conforme alle norme sopra ma ogni membro della community che condivide materiale deve accertarsi che il suddetto materiale non sia coperto da diritto d'autore o che in generale sia possibile la distribuzione e condivisione dello stesso.</p> </li> <li> <p>Se si condivide un link per un contenuto \u00e9 necessario accertarsi prima che l'indirizzo sia sicuro.</p> </li> </ol>"},{"location":"learning/","title":"Learning","text":"<p>In questa sezione viene condivisa la conoscenza che viene raccolta dalla community rispetto a librerie, metodi, tecnologie e buone pratiche.</p>"},{"location":"learning/articles/code_style/","title":"Code style","text":"<p>Quando si lavora su progetti e si conivide il codice con un team di lavoro \u00e8 importante cercare di mantenere uno stesso stile di scrittura del codice in modo da uniformarsi ed evitare di fraintendersi.</p> <p>In Python esistono:</p> <ul> <li>PEP8 = Default python style guide</li> <li>PEP257 = Docstring style guide</li> </ul> <p>Alcuni esempi di PEP8:</p> <ul> <li>Quando spazi si usano per l\u2019indentazione = 4 spazi</li> <li>Come indentare le parentesi</li> <li>Lunghezza della linea di codice predefinita (79 caratteri per il codice e 72 caratteri per i commenti e docstrings)</li> <li>Come configurare gli import</li> <li>\u2026</li> </ul> <p>Tuttavia nonostante le linee guida di PEP8 ci sono molte cose su cui di pu\u00f2 discutere e che non sono chiare, lasciando spesso anche troppa libert\u00e0.</p> <p>Ecco che entrano in gioco alcune librerie che aiutano nella gestione della qualit\u00e0 del codice.</p>"},{"location":"learning/articles/code_style/#black","title":"Black","text":"<p>Black \u00e8 un code formatter, prende i propri files e li formatta in accordo con PEP8 e PEP257 con alcune altre regole addizionali (ad esempio converte apostrofo singolo in apostrofo doppio).</p> <p>Permette di essere configurato (ad esempio mettendo <code>--skip-string-**normalization</code> per preservare gli apostrofi singoli).</p> <p>Black \u00e8 uno strumento molto discusso e a volte molto aggressivo, ma usandolo in un team consente di uniformare la scrittura del codice rendendolo comune.</p> <p>Installare e usare Black</p> <pre><code>#installare black\npip install black\n\n#tuttavia \u00e8 consigliato utilizzare pipx\npipx install black\n</code></pre> <p>Formattare un progetto</p> <pre><code>black my_project #my_project = folder di progetto\n</code></pre> <p>Inoltre \u00e8 possibile impostare black su vscode in modo da configurare lo styling al salvataggio</p> <p>Per farlo \u00e8 necessario andare nelle impostazioni (settings) e modificare l\u2019impostazione: format on save, in particolare:</p> <pre><code>python: formatting provider\n</code></pre> <p>Dai un'occhiata a questa guida per approfondire:</p> <p>https://marcobelo.medium.com/setting-up-python-black-on-visual-studio-code-5318eba4cd00</p>"},{"location":"learning/articles/code_style/#flake8","title":"Flake8","text":"<p>Oltre agli strumenti che consentono di formattare il codice in Python esistono diversi linter e analizzatori statici di codice.</p> <p>Uno dei pi\u00f9 popolari Linter su Python \u00e8 Flake8.</p> <p>Flake8 non cambia il codice in un progetto, ma fornisce uno strumento di warnings in real time</p> <p>Flake8 combina tre progetti differenti:</p> <ul> <li>pyflakes = da warnings su moduli non usati, variabili non definite, \u2026</li> <li>pycodestyle = da errori riguardo alle violazioni di PEP8</li> <li>McCabe (disabilitato di default) = fornisce warnings se le funzioni sono troppo complesse o complicate</li> </ul> <p>Un altro vantaggio di Flake8 che lo ha reso cos\u00ec popolare \u00e8 il massivo catalogo di plugins ed estensioni che si possono installare ed usare per estendere le funzionalit\u00e0 base della libreria.</p> <p>Per un elenco completo delle estensioni: https://github.com/DmytroLitvinov/awesome-flake8-extensions</p> <p>Alcune estensioni utili:</p> <ul> <li>flake8-builtins - makes sure you don\u2019t use Python builtins as variables or parameters</li> <li>flake8-bugbear - an additional set of checks (some are opinionated) that will complain when you, for example:<ul> <li>Use except: instead of except Exception:</li> <li>Use ++n</li> <li>Use .strip() on a multiline string</li> <li>Use a length-one tuple</li> </ul> </li> <li>flake8-comprehensions - helps you write better list/set/dictionary comprehensions</li> <li>flake8-docstrings - enforces PEP257</li> <li>flake8-eradicate - reports commented out code (\u201cdead code\u201d)</li> <li>flake8-isort - check if your import statements are sorted according to the isort recommendations</li> <li>flake8-broken-line - complains you use backslash for line breaks (try using parenthesis or tripple quotes instead)</li> <li>flake8-quotes - if you prefer single quotes over double quotes (or the other way around), this plugin can help you enforce them</li> <li>flake8-rst-docstrings - looks for problems in your documentation (usefull if you are using Sphinx that we will talk about later)</li> <li>flake8-mutable - checks that you don\u2019t use mutable default arguments</li> <li>flake8-bandit - introduce the capabilities of bandit inside flake8</li> </ul> <p>Installare Flake 8</p> <pre><code>pip install flake8\n\n#anche qui \u00e8 meglio utilizzare pipx\npipx install flake8\n\n#Installare estensioni\npip install flake8-docstrings flake8-isort\n#Ancora meglio sempre con pipx\npipx inject flake8 flake8-docstrings flake8-isort flake8-bandit\n\n# Se esce un errore di path fare\npipx ensurepath\n# Riavviare il terminale\n</code></pre> <p>Lanciare Flake8</p> <pre><code>flake8 my_project #my_project = cartella di progetto\n</code></pre> <p>Per usare al meglio Flake8 il consiglio \u00e8 sempre quello di integrarlo all\u2019interno di Visual Studio Code lanciando il comando: </p> <p><code>Python: Select Linter</code></p> <p>Per progetti grandi e per configurare al meglio Flake8 con tutti i suoi plugin \u00e8 possibile utilizzare anche l\u2019ottima libreria: FlakeHell che \u00e8 un wrapper che consente di definire un pyproject.toml file (lo stesso di Poetry) e di personalizzare le impostazioni al suo interno.</p> <p>Attenzione: la libreria di FlakeHell non \u00e8 piu aggiornata dal 2019 (\u00e8 archiviata su github) tuttavia \u00e8 stabile e perfettamente utilizzabile</p> <ul> <li>FlakeHell</li> <li>Esempio</li> </ul> <p>Ci sono tantissimi altri strumenti che consentono di controllare il codice e di segnalare eventuali errori man mano che lo state scrivendo.</p> <ul> <li>pylint</li> <li>pydocstyle</li> <li>bandit</li> <li>vulture</li> <li>wemake-python-style guide</li> <li>prospector</li> </ul> <p>Tuttavia vi consiglio di utilizzare Flake8 e Blake nei vostri progetti e di inserire anche Bandit</p>"},{"location":"learning/articles/code_style/#bandit","title":"Bandit","text":"<p>Bandit \u00e8 uno strumento per trovare problemi di sicurezza pi\u00f9 comuni all\u2019interno del codice Python.</p> <p>Utilizzandolo cos\u00ec com\u2019\u00e8 per\u00f2, senza un\u2019adeguata configurazione, fornisce anche un po' di falsi positivi.</p> <p>Spendendo un po' di tempo a configurarlo correttamente per i vostri progetti \u00e8 possibile avere informazioni utili riguardo:</p> <ul> <li>utilizzo insicuro di alcuni moduli</li> <li>possibili SQL Injection</li> <li>se il codice ignora silenziosamente alcune eccezioni</li> <li>e molto altro</li> </ul> <p>\u00c8 un utilissimo strumento soprattutto per principianti per revisionare il proprio codice.</p> <p>Per usare bandit il consiglio \u00e8 quello di installare l\u2019estensione di Flake8 <code>flake8-bandit</code> in modo da non dover installare e usare bandit separatamente, ma integrandolo direttamente nel vostro progetto.</p>"},{"location":"learning/articles/documentare_codice/","title":"Documentare il codice","text":""},{"location":"learning/articles/documentare_codice/#perche-documentare-il-codice-e-importante","title":"Perch\u00e8 documentare il codice \u00e8 importante?","text":"<p>E' fondamentale documentare per quanto possibile il proprio codice. Perch\u00e9?</p> <ul> <li> <p>Miglior comprensione del codice: aiuta a comprendere quello che abbiamo sviluppato aiutandoci a navigare il codice in maniera lineare. Una buona documentazione spiega lo scopo e la funzionalit\u00e0 di ciascun modulo e funzione, il che semplifica la modifica o l\u2019estensione del codice.</p> </li> <li> <p>Collaborazione: la documentazione ci permette di facilitare la risoluzione di bug o l'implementazione di modifiche in modo efficiente anche per i membri del team che devono lavorare sulla nostra soluzione.</p> </li> <li> <p>Manutenzione: con una buona documentazione la manutenzione del codice sar\u00e0 pi\u00f9 semplice e immediata proprio perch\u00e8 saranno pi\u00f9 facilmente gli intenti implementativi.</p> </li> <li> <p>Qualit\u00e0: la documentazione \u00e9 parte integrante di un prodotto software ed \u00e9 uno step mandatorio per il rilascio finale della soluzione. Fondamentale ancora di pi\u00f9 nel contesto consulenziale dove il software sar\u00e0 consegnato nelle mani di un cliente finale che poi dovr\u00e0 gestirlo in autonomia.</p> </li> </ul>"},{"location":"learning/articles/documentare_codice/#quali-tools","title":"Quali tools?","text":"<p>Ci sono moltissimi strumenti di documentazione del codice e tanti altri modi per farlo.</p> <p>Tre degli strumenti pi\u00f9 utilizzati per documentare il proprio codice sono:</p> <ul> <li>Python classico: utilizzando docstrings, commenti , ..</li> <li>Sphinx</li> <li>MKDocs</li> </ul>"},{"location":"learning/articles/documentare_codice/#docstrings-e-commenti","title":"Docstrings e commenti","text":""},{"location":"learning/articles/documentare_codice/#commenti","title":"Commenti","text":"<p>In python possiamo utilizzare innanzitutto i commenti nel nostro codice per meglio spiegare il funzionamento di una certa porzione di codice.</p> <p>Per creare un commento basta aggiungere il carattere # al testo del nostro commento    </p> <pre><code># commento per il seguente codice\nprint('Hello World')\n</code></pre> <p>oppure</p> <pre><code>print('Hello World') #commento\n</code></pre> <p>Ci sono anche le varianti per un commento multiline</p> <pre><code>#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")\n</code></pre> <p>oppure</p> <pre><code>\"\"\"\nThis is a comment\nwritten in\nmore than just one line\n\"\"\"\nprint(\"Hello, World!\")\n</code></pre>"},{"location":"learning/articles/documentare_codice/#docstrings","title":"Docstrings","text":"<p>Sono stringhe che ci permettono di andare a descrivere un metodo,una funzione,una classe o un modulo subito dopo la loro definizione</p> <pre><code>def square(n):\n    '''Takes in a number n, returns the square of n'''\nreturn n**2\n</code></pre> <p>Le docstring sono definite formalmente in PEP257</p> <p>Ci sono comunque varie convenzioni che possono essere seguite:</p> <ul> <li>Google</li> </ul> <pre><code>\"\"\"\nThis is an example of Google style.\n\nArgs:\n    param1: This is the first param.\n    param2: This is a second param.\n\nReturns:\n    This is a description of what is returned.\n\nRaises:\n    KeyError: Raises an exception.\n\"\"\"\n</code></pre> <ul> <li>reST (reStructuredText)</li> </ul> <pre><code>\"\"\"\nThis is a reST style.\n\n:param param1: this is a first param\n:param param2: this is a second param\n:returns: this is a description of what is returned\n:raises keyError: raises an exception\n\"\"\"\n</code></pre> <ul> <li>Numpy</li> </ul> <pre><code>\"\"\"\nMy numpydoc description of a kind\nof very exhautive numpydoc format docstring.\n\nParameters\n----------\nfirst : array_like\n    the 1st param name `first`\nsecond :\n    the 2nd param\nthird : {'value', 'other'}, optional\n    the 3rd param, by default 'value'\n\nReturns\n-------\nstring\n    a value in a string\n\nRaises\n------\nKeyError\n    when a key error\nOtherError\n    when an other error\n\"\"\"\n</code></pre> <p>\ud83d\udca1 Estensione VS Code</p> <p>autoDocstring \u00e9 un' estensione di vs code che ci permette di inserire un template di docstring all'interno del nostro codice in base al formato che indichiamo.</p> <p></p> <p>Per cambiare il formato andare nelle impostazioni dell'estensione e modificare il parametro autoDocstring.docstringFormat</p> <p> Utilizzo delle docstrings </p> <p>E' possibile consultare le docstrings, se presenti, tramite i seguenti comandi per ottenere una descrizione di un modulo o una funzione di una libreria esterna che vogliamo usare nel nostro progetto</p> <pre><code>print(some_function.__doc__)\n</code></pre> <p>oppure</p> <pre><code>help(some_function)\n</code></pre>"},{"location":"learning/articles/documentare_codice/#sphinx","title":"Sphinx","text":"<p>Sphinx \u00e9 forse la libreria pi\u00f9 famosa per generare documentazione, a partire da file di varia natura, in vari formati quali HTML,PDF,LaTex,ePub,plain text.</p>"},{"location":"learning/articles/documentare_codice/#overview","title":"Overview","text":"<p>Alcune delle caratteristiche pi\u00f9 importanti:</p> <ul> <li> <p>Output di vari formati pronti per la pubblicazione (possibilit\u00e0 di generare un sito web statico)</p> </li> <li> <p>Usa il formato reStructured Text ma \u00e9 possibile parasare anche markdown con l'apposita estensione</p> </li> <li> <p>Temi: ce ne sono moltissimi, il pi\u00f9 utilizzato \u00e9 Read the docs</p> </li> <li> <p>Estensioni: sono disponibili diverse estensioni create dagli utenti, la maggior parte installabili tramite PyPI</p> </li> </ul>"},{"location":"learning/articles/documentare_codice/#getting-started","title":"Getting started","text":"<p>Per prima cosa posizionarsi all'interno della root di progetto:</p> <ol> <li> <p>Installare sphinx</p> <p><code>pip install sphinx</code></p> </li> <li> <p>Creare una folder dedicata all'interno del progetto</p> <p><code>mkdir docs</code></p> <p><code>cd docs</code></p> </li> <li> <p>Il comando sphinx-quickstart permette di fare un rapido setup di tutto ci\u00f2 che \u00e9 necessario per poter effettuare la build della documentazione</p> <p><code>sphinx-quickstart --quiet --project=\"Default project\" --author=\"Author name\" --language=\"en\"</code></p> </li> <li> <p>Eseguire la build</p> <p><code>make html (on Unix)</code></p> <p><code>.\\make.bat html (on Windows PowerShell)</code></p> </li> </ol> <p>Con il setup iniziale all'interno della folder docs troveremo il file conf.py che \u00e9 il file di configurazione per la nostra documentazione dove potremo specificare le estensioni da utilizzare e molto altro.</p> <p>Ecco un esempio:</p> <pre><code>project = 'Example documentation'\ncopyright = '2022, Author name'\nauthor = 'Author name'\nrelease = '1.0.0'\n\nextensions = ['sphinx.ext.napoleon',\n'autoapi.extension',\n'autodocsumm',\n'sphinx_copybutton',\n'myst_parser'\n]\n\nautoapi_type = 'python'\nautoapi_dirs = ['../src']\n\nsource_suffix = {\n'.rst': 'restructuredtext',\n'.md': 'markdown',\n}\n\ntemplates_path = ['_templates']\nexclude_patterns = ['Thumbs.db', '.DS_Store','.venv']\n\nhtml_theme = 'sphinx_rtd_theme'\nhtml_title='Amazing project'\nhtml_static_path = ['_static']\nhtml_logo='_static/my_logo.png'\nhtml_show_sourcelink = True\nhtml_sidebars = {\n\"**\": [\"logo-text.html\", \"globaltoc.html\", \"localtoc.html\", \"searchbox.html\"]\n}\n\nhtml_theme_options = {\n'logo_only': False,\n'display_version': True,\n'prev_next_buttons_location': 'bottom',\n'style_external_links': False,\n'vcs_pageview_mode': '',\n'style_nav_header_background': 'white',\n# Toc options\n'collapse_navigation': True,\n'sticky_navigation': True,\n'navigation_depth': 2,\n'includehidden': True,\n'titles_only': False\n}\n</code></pre>"},{"location":"learning/articles/documentare_codice/#estensioni-utili","title":"Estensioni utili","text":"<ul> <li>sphinx.ext.napoleon: estensione che permette di considerare le docstring scritte nello stile Google e poterle incorporare cos\u00ec nella documentazione al posto di utilizzare quelle nel formato nativo di sphinx (reSt)</li> <li>autoapi.extension: permette di generare documentazione automatica a partire dalle docstring che avete inserito nel vostro codice mediante parsing dello stesso. Fondamentale \u00e9 specificare all'interno del conf.py il parametro autoapi_dirs = ['../src'] indicante la folder da parsare.</li> <li>autodocsumm: permette di creare un table of contents in un certo punto della documentazione</li> <li>sphinx_copybutton: permette di aggiungere un tasto \"copy to clipboard\" alle porzioni di codice all'interno della documentazione.</li> <li>myst_parser: permette di considerare markdown come testi sorgenti per sphinx.</li> </ul>"},{"location":"learning/articles/documentare_codice/#pubblicare-su-confluence","title":"Pubblicare su Confluence","text":"<p>Confluence \u00e9 un servizio di creazione e condivisioni di documenti  di Atlassian. E' stata creata un'estensione per poter pubblicare direttamente da sphinx su Confluence.</p> <p>L'estensione \u00e9 sphinxcontrib.confluencebuilder https://sphinxcontrib-confluencebuilder.readthedocs.io/en/stable/</p> <p>Di seguito gli step per poter configurare l'estensione correttamente</p> <ol> <li>Creare un account su Confluence</li> <li>Creare un token API https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/</li> <li>Installare l'estensione <code>pip install sphinxcontrib-confluencebuilder</code></li> <li>Configurare il file conf.py</li> </ol> <pre><code>extensions = [\n              'sphinxcontrib.confluencebuilder'\n]\n\nconfluence_publish = True\nconfluence_space_key = MyDocs\nconfluence_parent_page = MyWiki\nconfluence_server_url = xxxxxx\nconfluence_server_user = xxxxxx\nconfluence_server_pass = xxxxxx\n</code></pre>"},{"location":"learning/articles/documentare_codice/#mkdocs","title":"MKDocs","text":""},{"location":"learning/articles/gestire_dipendenze/","title":"Gestire dipendenze","text":"<p>Per gestire le dipendenze da Python 3.3 esiste un built-in module chiamato venv che consente di creare dei virtualenv all\u2019interno del vostro progetto.</p> <p>Questa ovviamente \u00e8 la \u201cvecchia maniera\u201d per\u00f2 \u00e8 sempre funzionante</p> <pre><code>python -m venv my-virtualenv\n</code></pre> <p>Il comando consente di creare una directory my-virtualenv che contiene:</p> <ul> <li>python binary</li> <li>pip/easy_install/wheel binary</li> <li>activation script</li> <li>binary files utilizzate da Python</li> </ul> <p>Per attivare un virtualenv si pu\u00f2 fare:</p> <pre><code>#Su Linux o Mac\nsource ./my-virtualenv/bin/activate\n\n#Su windows\nmy-virtualenv\\Scripts\\activate.bat\n\n#Disattivare virtualenv\ndeactivate\n</code></pre> <p>I virtualenv sono molto comodi e si possono usare in combinazione con i file requirements.txt</p> <p>Certamente \u00e8 un metodo molto comodo, tuttavia ci sono degli strumenti pi\u00f9 potenti ed efficaci per gestire il proprio ambiente.</p>"},{"location":"learning/articles/gestire_dipendenze/#pyenv-virtualenv","title":"Pyenv-virtualenv","text":"<p>Pyenv mette a disposizione uno strumento ancora pi\u00f9 efficace per costruire ambienti virtuali attraverso un plugin pyenv-virtualenv</p> <pre><code>#Creare un virtualenv\npyenv virtualenv 3.7.4 my-project\n\n#lista di tutti i virtual environments\npyenv virtualenvs\n\n#attivare un virtualenv\npyenv activate my-project\n\n#disattivare un virtualenv\npyenv deactivate\n</code></pre> <p>Oltre a virtualenv e pyenv-virtualenv ci sono altri strumenti molto utili e interessanti come:</p> <ul> <li>conda (che introduce anche il conda package manager) che \u00e8 molto invasivo</li> <li>virtualfish</li> <li>virtualenvwrapper</li> <li>pipenv: molto citato in tantissimi tutorial, ma \u00e8 veramente poco mantenuto (l\u2019ultima versione risale al 2018 con 300+ issue aperte) e pu\u00f2 causare diversi problemi in un progetto (oltre ad esserci diverse controversie legate al progetto: https://github.com/pypa/pipenv/issues/4058)</li> <li>pipx: per centralizzare alcune dipendenze</li> </ul>"},{"location":"learning/articles/gestire_dipendenze/#pipx","title":"Pipx","text":"<p>\u00c8 vero che ogni progetto dovrebbe sempre avere le proprie dipendenze e vivere in maniera atomica e indipendente rispetto agli altri progetti.</p> <p>Tuttavia ci sono alcune librerie che possono essere globali su tutta la macchina e su tutto il sistema.</p> <p>Alcune di queste librerie sono quelle che servono per gestire la qualit\u00e0 del codice o lo stile, come ad esempio black o flake8</p> <p>Ecco quindi che viene in soccorso pipx che consente di installare queste librerie globali e usarle globalmente su tutta la macchina.</p> <p>https://github.com/pipxproject/pipx</p> <p>Sostanzialmente quando volete installare delle librerie su tutta la macchina globalmente, invece di fare <code>pip install my_package</code> fate <code>pipx install my_package</code></p> <pre><code>#Lista di tutti i pacchetti\npipx list\n\n# rimuovere un pacchetto\npipx uninstall my_package\n\n# Lanciare una liberia o un comando\npipx run black my_file\n\n# Si pu\u00f2 anche specificare una determinata versione del pacchetto\npipx run --spec black==18.3a1 black --version\n</code></pre> <p>Ogni volta che viene lanciato pipx run my_package quello che succede \u00e8 che viene creato temporaneamente un virtualenvironment dentro al quale viene eseguito il comando per poi essere distrutto.</p> <p>Su visual studio \u00e8 importante fare questo settaggio se si vuole usare pipx (lo si fa una volta sola)</p> <pre><code># Installare il pacchetto\npipx install flake8\n\n# visualizzare dove viene installato il pacchetto\nwhich flake8\n&lt;path&gt;\n\n# Copiare il path e dire a visual studio quale binario prendere\n# Dentro al file settings.json (vedere come si fa a prendere) inserire\n\"python.linting.flake8Path\": \"/Users/YOUR_USERNAME/.local/bin/flake8\"\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#virtualenv","title":"Virtualenv","text":"<p>Pipenv vs virtualenv: https://medium.com/@dakota.lillie/an-introduction-to-virtual-environments-in-python-ce16cda92853</p> <p>Venv: https://medium.com/@rahul3012_37725/a-very-basic-guide-to-python-virtual-environments-a53d1e191490</p> <pre><code># install virtualenv\npip install virtualenv\n\n#Prima di lanciare il successivo comando controllare di essere su conda e fare:\nconda activate development #la versione di conda che usate deve essere &gt;= versione desiderata\n\n# generate a new virtualenv in a specific path\nvirtualenv --python=3.6 &lt;path_nome_env&gt;\n\n#### UNIX (mac and linux)\nsource &lt;path_nome_env&gt;/bin/activate\n\n#### WINDOWS\n&lt;path_nome_env&gt;\\scripts\\activate\n\n#### Visual Studio Code \n#(install Microsoft Python Extension and then click on python in the bottom tab)\n#Windows\nnavigate to -&gt; &lt;path_nome_env&gt;\\scripts\\&lt;python3.6&gt;\n#UNIX\nnavigate to -&gt; &lt;path_nome_env&gt;/bin/&lt;python3.6&gt;\n\n#Warning: if you are using another python version, change python3.6 to your current version\n\n#Then install requirements.txt\npip install -r requirements.txt\n</code></pre> <p>Prevent conda to activate default base environment by default <code>conda config --set auto_activate_base false</code></p> <p>PEP 518: introduce il pyproject.toml che rimpiazza quasi tutto.</p> <p>Publish package to Pypi (old school)</p> <p>https://www.youtube.com/watch?v=GIF3LaRqgXo&amp;ab_channel=CodingTech</p> <p>Use uf PipEnv</p> <p>https://hackersandslackers.com/pipenv-python-environment-management/ </p> <p>Differenze tra PipEnv, Pip e Conda (DevOps Concepts)</p> <p>https://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry","title":"Poetry","text":""},{"location":"learning/articles/gestire_dipendenze/#ovewrview","title":"Ovewrview","text":"<p>Poetry \u00e8 un nuovo modo di gestire progetti con Python che si adatta ai linguaggi e ai framework moderni pi\u00f9 famosi (come ad esempio node con npm o nuget per .NET)</p> <p>\u00c8 a tutti gli effetti un package and dependency management tool che consente quindi di gestire pacchetti, dipendenze, versioni unendo sia la gestione della versione di python in un determinato progetto con le rispettive dipendenze oltre ad introdurre concetti molto pi\u00f9 avanzati.</p> <p>Le feature pi\u00f9 importanti introdotte da Poetry sono:</p> <ul> <li>gestione del progetto e delle librerie in modo deterministico (e agile)</li> <li>facilit\u00e0 di costruire builds e package per il progetto con comandi configurabili</li> <li>pubblicare pacchetti velocemente su pypi</li> <li>traccia le dipendenze di progetto con un singolo comando</li> </ul> <p>\u00c8 un progetto nuovo, ci sono ancora diverse issue aperte, ma la community \u00e8 veramente molto attiva e stanno proponendo soluzioni sempre migliori oltre ad essere gi\u00e0 stabile (e sicuro) per essere usato anche in produzione.</p>"},{"location":"learning/articles/gestire_dipendenze/#come-usare-poetry","title":"Come usare poetry","text":"<p>Il cuore di Poetry \u00e8 il file pyproject.toml che viene creato all\u2019interno del progetto al momento dell\u2019inizializzazione.</p> <p>Questo file consente di definire tutte le caratteristiche di progetto e di gestire l\u2019intero progetto (come se usassimo un package.json su javascript per intenderci)</p> <p>Vediamo quindi come usare Poetry in un nuovo progetto:</p> <pre><code># Inizializzare poetry all'interno di una cartella\npoetry init\n\n# Oppure creare un nuovo progetto\npoetry new &lt;app_name&gt;\n\n# All'interno del progetto modificare il file: pyproject.tml come desiderate\n\n# Se vuoi utilizzare un venv all'interno del progetto fare:\npoetry config virtualenvs.in-project true\n# Se non si usa questa impostazione rimarr\u00e0 all'interno della cartella generale di poetry\n\n# Compilare il file pyproject.toml per creare il venv di progetto\npoetry shell\n\n# Aggiungere nuove dipendenze (al pyproject.toml)\npoetry add pandas\n\n# Installare dipendenze (in automatico aggiunte al pyproject.toml)\npoetry install\n\n# lanciare un file\npoetry run &lt;script&gt;\n\n# Visualizzare il path di dove si trova il venv di quel progetto (e anche l'elenco delle librerie)\npoetry show -v\n\n#Uscire da una shell lanciata da poetry\nexit\n</code></pre> <p>Attenzione: su windows utilizzando PowerShell quando fate: poetry shell in automatico vi butta fuori da powershell e vi far\u00e0 usare cmd.</p> <p>\u00c8 un bug noto e comunque c\u2019\u00e8 un modo per risolverlo (un workaround)</p> <p>https://github.com/python-poetry/poetry/issues/2030</p> <p>Come usare poetry in un progetto gi\u00e0 esistente?</p> <p>Magari che contiene gi\u00e0 un requirements.txt file</p> <pre><code># Inizializzare poetry all'interno di una directory\npoetry init\n\n# Se vuoi mantenere il .venv all'interno della cartella di progetto fare:\npoetry config virtualenvs.in-project true\n\n## Import requirements.txt libraries all'interno di poetry\npoetry add $( cat requirements.txt )\n\n# Se non esiste un requirements.txt continuare con classico format\n</code></pre> <p>Generate poetry requirements.txt</p> <pre><code>#Creare un file requirements.txt dalla configurazione di poetry\npoetry export -f requirements.txt --output requirements.txt\n</code></pre> <p>Esempio di pyproject.toml</p> <pre><code>[tool.poetry]\nname = \"poetry-tutorial-project\"\nversion = \"0.1.0\"\ndescription = \"Simple python project built with poetry\"\nauthors = [\"Andrea Guzzo &lt;andrea.guzzo92@gmail.com&gt;\"]\nmaintainers = [\"Andrea Guzzo &lt;andrea.guzzo92@gmail.com&gt;\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"http://localhost:5000\"\nrepository = \"https://github.com/jeydi/\"\ndocumentation = \"https://github.com/jeydi/\"\nkeywords = [\n\"Poetry\",\n\"Venv\",\n\"Virtual enviroments\",\n\"Packages\",\n\"Packaging\"\n]\n\n[tool.poetry.dependencies]\npython = \"^3.7\"\nloguru = \"*\"\npsutil = \"*\"\npandas = \"*\"\nnumpy = \"*\"\nfastapi = \"*\"\ntyper = \"^0.3.2\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.scripts]\nrun = \"wsgi:main\"\n\n[tool.poetry.urls]\nissues = \"https://github.com/jeydi/\"\n</code></pre> <p>Attenzione:</p> <p>Per alcune librerie (ad esempio pandas), potrebbero esserci dei problemi di versionamento rispetto alle librerie dipendenti. A tal proposito si consiglia di installare anche pip come dipendenza e aggiornarlo all\u2019ultima versione.</p> <pre><code>#Installare pip\npoetry add pip\n\n#Oppure aggiornare pip una volta creato il .venv con poetry\n#Importante avere prima il .venv\npip install --upgrade pip\n</code></pre> <p>Questo \u00e8 un workaround per superare problemi di installazione molto lunga.</p> <p>Poetry \u00e8 sicuramente pi\u00f9 lento di virtualenv, ma \u00e8 molto pi\u00f9 sicuro e pi\u00f9 severo in quanto prima controlla tutte le dipendenze verificando che siano sicure.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-avanzato","title":"Poetry avanzato","text":"<p>Poetry \u00e8 il pi\u00f9 sofisticato sistema di gestione delle dipendenze su Python disponibile (nel 2020).</p> <p>Consente di andare al di l\u00e0 della semplice gestione delle dipendenze, con funzioni come: generare .lock files, consentire di fare scaffolding dei progetti con molte possibilit\u00e0 di personalizzazione, il tutto disponibile via CLI.</p>"},{"location":"learning/articles/gestire_dipendenze/#installare-poetry-e-includere-linstallazione","title":"Installare poetry e includere l\u2019installazione","text":"<p>Per installare Poetry \u00e8 importante fare riferimento alla guida ufficiale che descrive i passi per i vari sistemi operativi.</p> <p>Non riportiamo volutamente i passi necessari all\u2019installazione siccome cambiano spesso con i nuovi aggiornamenti e le nuove versioni.</p> <p>A tal proposito il sito di riferimento \u00e8: documentazione ufficiale</p>"},{"location":"learning/articles/gestire_dipendenze/#creare-un-progetto-python-utilizzando-poetry","title":"Creare un progetto python utilizzando Poetry","text":"<pre><code>poetry new poetry-tutorial-project\n</code></pre> <p>La ricetta segreta di ogni progetto costruito con poetry \u00e8 la creazione di un file chiamato pyproject.toml . All\u2019interno di questo file \u00e8 possibile definire tutto quello che esiste all\u2019interno del progetto: metadati, dipendenze, librerie, scripts e molto altro\u2026</p> <p>Se siete a vostro agio con node.js possiamo considerare il file pyproject.toml come un package.json del progetto.</p> <p>Composizione di poetry (file toml)</p> <p>Documentazione: https://python-poetry.org/docs/pyproject/</p> <ul> <li>[tool.poetry] = semplice metadato informativo riguardo al package che state sviluppando (come il package name, descrizione, autore, dettagli, \u2026). Alcune impostazioni sono utili solamente se pensate di pubblicare il vostro pacchetto su Pypi.</li> <li>[tool.poetry.dependencies] = Consente di definire le dipendenze dell\u2019applicazione che sono assolutamente necessarie per lanciare il vostro programma. \u00c8 anche possibile impostare una versione particolare del pacchetto che volete installare (such as Flask = \u201c1.0.0\u201d), Se invece si vuole semplicemente definire l\u2019ultima versione \u00e8 possibile inserire solamente \u201c*\u201d. \u00c8 anche possibile specificare la versione di Python richiesta per lanciare il progetto e la vostra applicazione.</li> <li>[tool.poetry.dev-dependencies] = Le Dev dependencies sono tutte le librerie che servono agli sviluppatori per costruire e programmare il progetto, ma che non devono essere portare in produzione. Queste dipendenze non servono per lanciare l\u2019applicazione e non verranno scaricate se l\u2019applicazione viene \u201cbuildata\u201d di default.</li> <li>[build-system] = Questa sezione \u00e8 raramente utilizzata, modificatela solamente se avete intenzione di aggiornare Poetry.</li> <li>[tool.poetry.scripts] = Qui \u00e8 dove si specificano gli entry point dell\u2019applicazione, assegnando una funzione all\u2019interno dei moduli necessaria a lanciare l\u2019applicazione. L\u2019esempio utilizza: run = \u201cwsgi:main\u201d che specifica che vogliamo creare un comando \u201crun\u201d che cercher\u00e0 all\u2019interno del file: \u201cwsgi.py\u201d una funzione chiamata: main(). Con questa impostazione \u00e8 possibile lanciare l\u2019applicazione utilizzando la CLI scrivendo: poetry run</li> <li>[tool.poetry.urls]: Questa impostazione \u00e8 opzionale e pu\u00f2 essere utilizzata per inserire link utili di risorse, documentazione o altro legato al progetto e importanti se volete rilasciare il vostro pacchetto.</li> </ul>"},{"location":"learning/articles/gestire_dipendenze/#installare-e-gestire-le-dipendenze","title":"Installare e gestire le dipendenze","text":""},{"location":"learning/articles/gestire_dipendenze/#poetry-shell","title":"poetry shell","text":"<p>La prima volta che questo comando viene eseguito nella directory del tuo progetto, Poetry crea un ambiente virtuale Python che sar\u00e0 per sempre associato a questo progetto. Invece di creare una cartella contenente le tue librerie di dipendenza (come fa virtualenv), Poetry crea un ambiente su un percorso di sistema globale, separando cos\u00ec il codice sorgente di dipendenza dal tuo progetto. Una volta che questo ambiente virtuale \u00e8 creato, pu\u00f2 essere attivato di nuovo in qualsiasi momento semplicemente eseguendo poetry shell nella directory del tuo progetto in futuro. Prova a confrontare l\u2019output di python prima e dopo aver attivato la shell del tuo progetto per vedere come Poetry gestisce gli ambienti virtuali.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-install","title":"poetry install","text":"<p>Installa le dipendenze specificate in pyproject.toml. La prima volta che le dipendenze di un progetto vengono installate, viene creato un file .lock, che contiene i numeri di versione effettivi di ogni pacchetto che \u00e8 stato installato (ad esempio: se Flask = \u201c*\u201d ha portato a scaricare Flask versione 1.0.0, il numero di versione effettivo verrebbe memorizzato in .lock). Se \u00e8 presente un file .lock, i numeri di versione in .lock avranno sempre la priorit\u00e0 su quelli presenti in pyproject.toml.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-update","title":"poetry update","text":"<p>Imita la funzionalit\u00e0 di install, con l\u2019eccezione che i numeri di versione in .lock NON saranno rispettati. Se esistono versioni pi\u00f9 recenti per i pacchetti in pyproject.toml, saranno installate le versioni pi\u00f9 recenti e .lock sar\u00e0 aggiornato di conseguenza.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-add-package-name","title":"poetry add [package-name]","text":"<p>Una scorciatoia per aggiungere una dipendenza a pyproject.toml. Il pacchetto viene installato immediatamente dopo essere stato aggiunto.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-remove-package-name","title":"poetry remove [package-name]","text":"<p>Comando per rimuovere una determinata dipendenza dalla lista delle dipendenze del progetto definite nel pyproject.toml</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-export-f-requirementstxt-requirementstxt","title":"poetry export -f requirements.txt &gt; requirements.txt","text":"<p>Esporta il contenuto del file .lock del tuo progetto in requirements.txt. \u00c8 utile quando si passa il lavoro a sviluppatori che usano ancora requirements.txt per qualche motivo.</p> <p>\u00c8 anche possibile eseguire il seguente comando: poetry export -f requirements.txt --output reqtest.txt --without-hashes che consente di esportare le dipendenze in un file con un nome diverso (reqtest.txt) e senza gli hash che codificano i pacchetti. Questo comando pu\u00f2 essere utile se con il comando normale ci sono dei problemi nell\u2019installazione dei requirements.txt</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-env-list-full-path","title":"poetry env list --full-path","text":"<p>Visualizzare il percorso e l\u2019elenco dell\u2019ambiente.</p>"},{"location":"learning/articles/gestire_dipendenze/#configurazioni","title":"Configurazioni","text":""},{"location":"learning/articles/gestire_dipendenze/#poetry-config","title":"poetry config","text":"<p>\u201cConfig\u201d si riferisce alla configurazione a livello di ambiente, come i percorsi dell\u2019ambiente virtuale corrente o le variabili di ambiente. Passando l\u2019opzione \u2013list restituir\u00e0 gli attuali valori di configurazione del tuo ambiente.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-check","title":"poetry check","text":"<p>Consente di controllare il file pyproject.toml per eventuali errori</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-show","title":"poetry show","text":"<p>Restituisce una ripartizione di tutti i pacchetti attualmente installati nel progetto, comprese le dipendenze delle dipendenze.</p>"},{"location":"learning/articles/gestire_dipendenze/#esecuzione-dellapplicazione","title":"Esecuzione dell\u2019applicazione","text":""},{"location":"learning/articles/gestire_dipendenze/#poetry-run-script-name","title":"poetry run [script-name]","text":"<p>Esegue lo script definito all\u2019interno della sezione: [tool.poetry.scripts] del pyproject.toml</p>"},{"location":"learning/articles/gestire_dipendenze/#buildare-e-pubblicare-il-pacchetto-progetto","title":"Buildare e pubblicare il pacchetto (progetto)","text":""},{"location":"learning/articles/gestire_dipendenze/#poetry-build","title":"poetry build","text":"<p>Consente di creare una build del codice sorgente e dell\u2019archivio wheels</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-publish","title":"poetry publish","text":"<p>Pubblica l\u2019output della build all\u2019interno di una repository esterna (come ad esempio Pypi)</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-getting-started","title":"Poetry Getting Started","text":"<p>Vediamo adesso come fare per inizializzare poetry all\u2019interno di un nuovo progetto</p> <pre><code>##Inizializziamo poetry all'interno di una cartella\npoetry init\n\n#Oppure creiamo un nuovo progetto (crea anche una sotto cartella)\npoetry new &lt;app_name&gt;\n\n## Ora potete modificare il file: pyproject.toml come volete\n\n#Se volete creare la cartella .venv all'interno del progetto fate:\npoetry config virtualenvs.in-project true\n\n#Ora occore compilare poetry per creare il venv\n#E lanciare la shell con il venv che avete definito\npoetry shell\n\n#Se necessario aggiornare pip\npython -m pip install --upgrade pip\n# Questo pu\u00f2 essere necessario se compaiono degli errori nell'installazione delle dipendenze\n\n#Aggiungere una dipendenza e installarla\npoetry add pandas\n\n#Aggiungere una dipendenza di sviluppo e installarla\npoetry add -D flake8\n\n#Se avete definito le librerie all'interno del pyproject.toml\n#\u00c8 possibile installarle lanciando questo comando\npoetry install\n\n#Per lanciare un file definito nel pyproject.toml\npoetry run &lt;script&gt;\n\n#Visualizzare il path del virtual env all'interno del progetto (o fuori)\n#Con anche la lista delle librerie installate\npoetry show -v\n\n# \u00c8 sempre possibile visualizzare la versione di default di python in uso correntemente\nwhich python\n\n#Per uscire dalla shell di poetry e dall'ambiente creato\nexit\n\n#Rimuovere un ambiente virtuale (venv) utilizzanto poetry\npoetry env remove &lt;python&gt;\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#aggiungere-poetry-ad-un-progetto-esistente-con-dei-requirementstxt","title":"Aggiungere poetry ad un progetto esistente (con dei requirements.txt)","text":"<pre><code>#inizializzare poetry all'interno di una directory\npoetry init\n\n#compilare le informazioni all'interno del pyproject.toml\n\n#Se si vuole utilizzare un virtual env all'interno del progetto fare:\npoetry config virtualenvs.in-project true\n\n## Importare i requirements.txt (librerie) all'interno di poetry\npoetry add $( cat requirements.txt )\n# Non \u00e8 \"bellissimo\" e potrebbe non funzionare\n</code></pre> <p>Generare da poetry un file: requirements.txt</p> <pre><code>poetry export -f requirements.txt &gt; requirements.txt\n\n#Un esempio pi\u00f9 completo\npoetry export -f requirements.txt --output reqtest.txt --without-hashes\n#crea un file: reqtest.txt differente\n#senza gli hash (ovvero senza la firma delle librerie) \n#\u00e8 meno safe perch\u00e8 con gli hash pip potrebbe avere problemi nell'installazione\n</code></pre> <p>Attenzione pu\u00f2 accadere in alcune situazioni di dover aggiornare pip per installare alcune librerie, per farlo una volta creato e attivato il vostro virtualenvironment con python fare:</p> <pre><code>#Aggiornare pip\npython -m pip install --upgrade pip\n</code></pre> <p>Questo problema pu\u00f2 verificarsi appena lanciate un\u2019installazione di una libreria oppure fate poetry install o poetry update.</p> <p>ATTENZIONE: non chiamate nessun file o modulo, oppure il vostro progetto come un nome di una libreria che installerete utilizzando poetry.</p> <p>Oltre ad essere un cattiva pratica in un progetto mander\u00e0 in confusione poetry dandovi un AssertionError.</p> <p>https://github.com/python-poetry/poetry/issues/236</p> <p>Se vi trovaste nella situazione di aver creato un modulo, una cartella o un file con lo stesso nome di una libreria il consiglio \u00e8 quello di rinominare il file o cartella incriminata, eliminare il vostro virtualenvironment e lanciare nuovamente: poetry install per installare una versione pulita del virtualenv.</p>"},{"location":"learning/articles/gestire_dipendenze/#poetry-in-vscode","title":"Poetry in VSCode","text":"<p>Poetry non \u00e8 ancora integrato all\u2019interno di vscode e nell\u2019estensione ufficiale di Python, quindi per utilizzarlo con vscode \u00e8 necessario configurarlo manualmente.</p> <p>Per consentire al progetto di utilizzare l\u2019ambiente virtuale del progetto \u00e8 necessario definire un file inserendo il path di riferimento dell\u2019ambiente virtuale creato con poetry</p> <ul> <li>lanciare nel terminale: poetry env list --full-path e copiare il path che si riferisce all\u2019ambiente virtuale (venv) di poetry</li> <li>All\u2019interno del progetto creare una nuova cartella chiamata: .vscode</li> <li>All\u2019interno della cartella creare un file chiamato: settings.json</li> <li>Inserire nel file la seguente configurazione</li> </ul> <pre><code>{\n    \"python.pythonPath\": \"&lt;path dell'ambiente venv copiato&gt;\"\n}\n</code></pre> <ul> <li>Rilanciare vscode e in automatico quando aprirete un file .py verr\u00e0 utilizzata la versione di Python che avete creato con Poetry</li> </ul> <p>Ricordarsi sempre di lanciare nel terminale: poetry shell per lanciare l\u2019ambiente</p> <p>Ricordarsi di non pushare sulla vostra repository git remota le configurazioni di vscode appena create per non sovrascrivere quelle dei colleghi (inserite la cartella .vscode nel file gitignore)</p> <p>Un altro metodo</p> <p>Lanciare il progetto da terminale</p> <pre><code>#dire a poetry di generare in locale il virtualenv\npoetry config virtualenvs.in-project true --local\npoetry config virtualenvs.create true --local\npoetry config settings.virtualenvs.in-project true\n\n#quindi lanciare\npoetry install\n</code></pre> <p>In questo modo generete un cartella chiamata: virtualenv all\u2019interno del progetto, in questo modo vscode capir\u00e0 che questo \u00e8 il default virtualenv da utilizzare invece di quello globale</p> <p>Se si vuole fermare l\u2019utilizzo del .venv all\u2019interno del progetto \u00e8 possibile fare:</p> <pre><code>#tell poetry not to use venv inside the proj folder\npoetry config virtualenvs.in-project false --local\npoetry config virtualenvs.create false --local\npoetry config settings.virtualenvs.in-project false\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#installare-poetry-nella-cartella-di-progetto","title":"Installare poetry nella cartella di progetto","text":"<p>Un\u2019impostazione molto utile per poetry (anche con vscode) \u00e8 quella di dire a poetry di installare il virtualenv python con le rispettive librerie all\u2019interno della cartella di progetto.</p> <p>Questo \u00e8 molto comodo perch\u00e8 ad esempio con vscode vi basta inserire l\u2019impostazione:</p> <pre><code>\"python.pythonPath\": \"${workspaceFolder}/.venv/bin/python\"\n</code></pre> <p>Per attivare il virtualenv nel vostro progetto in modo automatico.</p> <p>Attention: ricordatevi sempre di inserire .venv all\u2019interno del file: .gitignore per non pushare sulla vostra repository tutto il virtualenv!!</p> <p>Per fare questo, il modo pi\u00f9 semplice \u00e8 fare da terminale: poetry config virtualenvs.in-project true.</p> <p>Ma se volete attivarlo di default potete aggiungere un file: poetry.toml nella cartella di progetto cos\u00ec formato:</p> <pre><code>[virtualenvs]\ncreate = true\nin-project = true\n</code></pre> <p>In questo modo tutte le volte che si far\u00e0: poetry install verr\u00e0 installato poetry nella cartella di progetto in automatico.</p> <p>Per visualizzare tutte le possibili configurazioni installate su una repository \u00e8 possibile usare il comando:</p> <pre><code># visualize all the configurations\npoetry config --list\n</code></pre> <p>Per rimuovere delle configurazioni invece \u00e8 possibile fare:</p> <pre><code>poetry config --unset repo.foo\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#un-esempio-di-pyprojecttoml","title":"Un esempio di Pyproject.toml","text":"<p>Ecco un esempio di file pyproject.toml che potete utilizzare sui vostri progetti (ovviamente con gli opportuni cambiamenti e personalizzazioni)</p> <pre><code>[tool.poetry]\nname = \"poetry-tutorial-project\"\nversion = \"0.1.0\"\ndescription = \"Simple python project built with poetry\"\nauthors = [\"Andrea Guzzo &lt;andrea.guzzo92@gmail.com&gt;\"]\nmaintainers = [\"Andrea Guzzo &lt;andrea.guzzo92@gmail.com&gt;\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"http://localhost:5000\"\nrepository = \"https://github.com/jeydi/\"\ndocumentation = \"https://github.com/jeydi/\"\nkeywords = [\n\"Poetry\",\n\"Venv\",\n\"Virtual enviroments\",\n\"Packages\",\n\"Packaging\"\n]\n\n[tool.poetry.dependencies]\npython = \"^3.7\"\nloguru = \"*\"\npsutil = \"*\"\npandas = \"*\"\nnumpy = \"*\"\nfastapi = \"*\"\ntyper = \"^0.3.2\"\n\n[tool.poetry.dev-dependencies]\npytest = \"^5.2\"\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry.scripts]\nrun = \"wsgi:main\"\n\n[tool.poetry.urls]\nissues = \"https://github.com/jeydi/\"\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#aggiornare-poetry","title":"Aggiornare poetry","text":"<p>Aggiornare poetry all\u2019ultima versione stabile \u00e8 semplice</p> <pre><code>#Aggiornare poetry all'ultima versione stabile\npoetry self update\n\n#Lanciare questo comando se invece volete installare la preview di poetry\npoetry self update --preview\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#cancella-poetry","title":"Cancella poetry","text":"<p>Per cancellare e rimuovere poetry \u00e8 possibile eseguire questi comandi</p> <pre><code>#Uninstall poetry\npython get-poetry.py --uninstall\n\n# Another method (optional)\n# Setting the POETRY_UNINSTALL env variable befor executing the installer\nPOETRY_UNINSTALL=1 python get-poetry.py\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#abilitare-il-completamento-per-bash-o-zsh","title":"Abilitare il completamento per bash o zsh","text":"<p>Poetry supporta il completamento automatico da terminale per diverse CLI come: bash, zsh o fish.</p> <p>Se volete avere ulteriori dettagli su queste funzionalit\u00e0 potete lanciare: poetry help completions</p> <pre><code>poetry completions bash &gt; /etc/bash_completion.d/poetry.bash-completion\n\n# Bash (Homebrew)\npoetry completions bash &gt; $(brew --prefix)/etc/bash_completion.d/poetry.bash-completion\n\n# Zsh\npoetry completions zsh &gt; ~/.zfunc/_poetry\n\n# Oh-My-Zsh\nmkdir $ZSH_CUSTOM/plugins/poetry\npoetry completions zsh &gt; $ZSH_CUSTOM/plugins/poetry/_poetry\n</code></pre> <p>Dovrete riavviare la shell per poter vedere le modifiche</p> <p>Attenzione (alcuni dettagli):</p> <p>For zsh you must add the following line into ~/.zshrc profile before compinit</p> <p><code>fpath+=~/.zfunc</code></p> <p>For oh-my-zsh you must then enable poetry in your ~/.zshrc plugin</p> <pre><code>plugins(\n    poetry\n    ...\n    )\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#utilizzare-strumenti-con-poetry","title":"Utilizzare strumenti con poetry","text":"<p>Con poetry inoltre \u00e8 possibile utilizzare alcuni strumenti utili per linting, controllo e test del codice come:</p> <ul> <li>black</li> <li>flake8</li> <li>mypy</li> </ul>"},{"location":"learning/articles/gestire_dipendenze/#integrazione-con-pytest","title":"Integrazione con pytest","text":"<p>Poetry inoltre supporta l\u2019integrazione con pytest e permette di definire degli argomenti per i test che possono tornare utili soprattutto nel caso di applicazioni molto grandi e corpose che richiedono una maggiore copertura dei casi di test.</p>"},{"location":"learning/articles/gestire_dipendenze/#deploy","title":"Deploy","text":"<p>Come utilizzare poetry con Docker in fase di deploy?</p> <p>Ecco alcuni link interessanti</p> <ul> <li>https://medium.com/@harpalsahota/dockerizing-python-poetry-applications-1aa3acb76287</li> <li>docker caching: https://pythonspeed.com/articles/poetry-vs-docker-caching/</li> <li>Production Ready Docker packaging for python developers: https://pythonspeed.com/docker/#articles-the-basics-of-docker-packaging</li> </ul> <p>A tal proposito condividiamo qui un Dockerfile di esempio in modo da poter utilizzare questo come base per il deploy (anche per immagini in produzione)</p> <p>Dockerfile</p> <pre><code>FROM python:3.8\n\n# Metadata\nLABEL name=\"PBG Poetry Example\"\nLABEL maintainer=\"PBG\"\nLABEL version=\"0.1\"\n\nARG YOUR_ENV=\"virtualenv\"\n\nENV YOUR_ENV=${YOUR_ENV} \\\n    PYTHONFAULTHANDLER=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONHASHSEED=random \\\n    PIP_NO_CACHE_DIR=off \\\n    PIP_DISABLE_PIP_VERSION_CHECK=on \\\n    PIP_DEFAULT_TIMEOUT=100 \\\n    POETRY_VERSION=1.1.13 \\\n    LC_ALL=C.UTF-8 \\\n    LANG=C.UTF-8\n\n# System deps:\nRUN DEBIAN_FRONTEND=noninteractive apt update &amp;&amp; apt install -y libpq-dev gcc\n\n# Install poetry\nRUN pip install \"poetry==$POETRY_VERSION\"\n\n# Copy only requirements to cache them in docker layer\nWORKDIR /app\n\n#Copy all the project files\nCOPY . .\n# Install libraries \nRUN poetry config virtualenvs.create false \\\n    &amp;&amp; poetry install $(test \"$YOUR_ENV\" = production) --no-dev --no-interaction --no-ansi\n\n# Set the launching script exec\nRUN chmod +x launch.sh\n\n# Launch the script for cron\nCMD [\"bash\", \"launch.sh\"]\n\n# Launch main python script\n# CMD [\"gunicorn\", \"-w\", \"4\", \"-b\", \"0.0.0.0:8000\", \"core.app:app\"]\n</code></pre>"},{"location":"learning/articles/gestire_dipendenze/#standardizzare-le-impostazioni","title":"Standardizzare le impostazioni","text":"<p>Su Poetry \u00e8 possibile standardizzare le impostazioni di poetry per un determinto progetto all\u2019interno di un file, evitando che lo sviluppatore o una pipeline di rilascio debba lanciare manualmente dei comandi per configurare poetry.</p> <p>Per fare questo \u00e8 possibile creare un file chiamato: poetry.toml all\u2019interno del progetto.</p> <p>Un esempio di file pu\u00f2 essere questo:</p> <pre><code>[virtualenvs]\nin-project = true\ncreate = true\n</code></pre> <p>Queste impostazioni consentono di creare un .venv all\u2019interno del progetto senza lanciare manualmente il comando di creazione del venv all\u2019interno del progetto da terminale.</p> <p>Con questo file \u00e8 possibile fare overriding di tutte le impostazioni di poetry.</p> <p>Per vedere l\u2019elenco delle impostazioni che \u00e8 possibile inserire, fare riferimento a questa documentazione:</p> <p>https://python-poetry.org/docs/configuration/</p>"},{"location":"learning/articles/gestire_dipendenze/#documentazione-e-link-utili","title":"Documentazione e link utili","text":"<p>Documentazione ufficiale (fatta molto bene) : https://python-poetry.org/docs/basic-usage/</p> <p>https://hackersandslackers.com/python-poetry-package-manager/</p> <p>https://www.youtube.com/watch?v=QX_Nhu1zhlg&amp;ab_channel=PyGotham2019</p> <p>Build CLI Utilities with Poetry and Typer: https://www.pluralsight.com/tech-blog/python-cli-utilities-with-poetry-and-typer/</p> <p>Confronto con altre librerie: https://towardsdatascience.com/devops-for-data-science-making-your-python-project-reproducible-f55646e110fa</p> <p>Use Poetry in Production (with Docker): https://stackoverflow.com/questions/53835198/integrating-python-poetry-with-docker</p> <p>Data Science PRO with Poetry + Jupyter + VSCode: https://medium.com/analytics-vidhya/setting-up-data-science-python-projects-with-vscode-poetry-jupyter-b96efeea24c8</p> <p>Poetry Configure Workspace:</p> <p>https://zhauniarovich.com/post/2020/2020-02-configuring-python-workspace-p2/</p> <p>To solve problems with psycopg2 and Python</p> <p>https://blog.vince.id/installing-psycopg2-on-macos</p>"},{"location":"learning/articles/gestire_versioni_python/","title":"Gestire diverse versioni di Python","text":"<p>In questa prima sezione vediamo come gestire le proprie installazioni di python all\u2019interno della macchina sfruttando: pyenv</p> <p></p> <p></p>"},{"location":"learning/articles/gestire_versioni_python/#pyenv","title":"Pyenv","text":""},{"location":"learning/articles/gestire_versioni_python/#overview","title":"Overview","text":"<p>Pyenv consente di gestire diverse versioni di python installate nella vostra macchina, consentendo di gestirle in modo molto semplice e veloce.</p> <p>\u00c8 semplice e non troppo invasivo, inoltre potete utilizzarlo su qualsiasi sistema operativo</p> <ul> <li>Consente di cambiare la versione globale di python oppure locale per ogni progetto o utente</li> <li>Consente di gestire una versione locale di ogni progetto con la propria specifica versione di python</li> <li>Permette di fare override della versione di Python come variabili d\u2019ambiente (non dovete pi\u00f9 gestirle a mano)</li> <li>Consente di ricercare diverse versioni di python e gestirle (con tox)</li> </ul>"},{"location":"learning/articles/gestire_versioni_python/#alcuni-aspetti-molto-importanti","title":"Alcuni aspetti molto importanti","text":"<ul> <li>Non ci sono problemi di bootstrap, \u00e8 costruito utilizzando script shell puri</li> <li>Non \u00e8 necessario caricarlo all\u2019interno della propria shell, basta inserire la sua directory nelle variabili di ambiente e funziona \u201cda solo\u201d</li> <li>Consente inoltre (ed eventualmente) di gestire in moldo pi\u00f9 efficiente i virtualenviroments</li> <li>Documentazione fatta molto bene con moltissimo supporto online.</li> </ul>"},{"location":"learning/articles/gestire_versioni_python/#comandi-utili","title":"Comandi utili","text":"<pre><code>pyenv install --list\n\n# Installare una specifica versione di python\npyenv install 3.7.4\n\n# Visualizzare tutte le versioni installate (di pyenv)\npyenv versions\n\n# Impostare una determinata versione di python globale (usata da tutto il sistema operativo)\npyenv global 3.7.4\n\n# Impostare una versione di python locale\npyenv local 3.7.4 #viene creato un .python-version file\n# Cancellando il file .python-version si cancella la versione locale\nrm .python-version\n\n#Cambiare la versione solamente per la sessione di shell esistente\npyenv shell system\n</code></pre> <p>Con pyenv abbiamo risolto il problema di cambiare velocemente e in modo efficace la versione di python installata sulla propria macchina.</p> <p>Rimane il problema di gestire le dipendenze (le librerie) all\u2019interno di progetti diversi.</p> <p>Python ha un grande problema: non si possono avere versioni multiple della stessa libreria (package) installata in una determinata versione di Python.</p> <p>Ecco che entrano in gioco i virtualenvironments</p> <p>\u00c8 importante utilizzare separati virtualenvs per ogni progetto che si fa su python, iniziando ad esercitarsi da quelli pi\u00f9 semplici.</p>"},{"location":"learning/articles/gestire_versioni_python/#pyenv-avanzato","title":"Pyenv avanzato","text":"<p>In questa sezione avanzata sono presenti appunti, best practice e guide per approfondire tutto ci\u00f2 che riguarda Pyenv</p>"},{"location":"learning/articles/gestire_versioni_python/#documentazione-utile","title":"Documentazione utile","text":"<p>https://realpython.com/intro-to-pyenv/</p> <p>Pyenv con poetry</p> <p>https://blog.jayway.com/2019/12/28/pyenv-poetry-saviours-in-the-python-chaos/</p> <p>Guida per configurare pyenv su Mac</p> <p>https://opensource.com/article/20/4/pyenv</p> <p>Notes su un Github Gist</p> <p>https://gist.github.com/Geoyi/f55ed54d24cc9ff1c14bd95fac21c042</p> <p>Pyenv \u00e8 un gestore di installazione di python. Permette di installare e eseguire pi\u00f9 installazioni di python sulla stessa macchina. Pyenv gestisce le differenti versioni di python per te, in modo da evitare il chaos di dipendenze, versioni e installazioni illustrato nell\u2019immagine iniziale.</p> <p>Perch\u00e8 non utilizzare python installato di default nel proprio sistema operativo?</p> <p>Perch\u00e8 possono creare problemi nei progetti, ognuno ha la propria versione e ci possono essere problemi di migrazione e riproducibilit\u00e0 quando si usano in contesti di produzione.</p>"},{"location":"learning/articles/gestire_versioni_python/#cosa-ci-consente-di-fare-pyenv-flusso-operativo","title":"Cosa ci consente di fare pyenv? (flusso operativo)","text":"<ol> <li>installare Python nel proprio user space</li> <li>installare versioni multiple di python</li> <li>specificare quale esatta versione di python utilizzare per un progetto e/o attivit\u00e0</li> <li>cambiare tra le diverse versioni installate facilmente</li> </ol>"},{"location":"learning/articles/gestire_versioni_python/#installare-pyenv","title":"Installare Pyenv","text":"<p>Per installare Pyenv vi rimandiamo alla documentazione ufficiale su Github. Questo perch\u00e8 le modalit\u00e0 di installazione cambiano a seconda della versione e del sistema operativo e stare al passo con gli aggiornamenti \u00e8 sempre complicato.</p> <p>Pi\u00f9 avanti in questa guida trovate esempi di utilizzo con Pyenv pi\u00f9 avanzati.</p> <p>La guida di riferimento per l\u2019installazione la potete trovare: qui</p> <p>Verificare installazione di Pyenv</p> <p>Una volta installato e configurato correttamente sul vostro terminale terminale fare:</p> <pre><code>pyenv --version\n</code></pre>"},{"location":"learning/articles/gestire_versioni_python/#installare-python","title":"Installare Python","text":"<p>Visualizzare le versioni di python</p> <pre><code>pyenv install --list | grep \" 3\\.[678]\"\n</code></pre> <pre><code>pyenv install -v 3.7.2\n</code></pre> <p>Visualizzare dove vengono installate le varie versioni su Python</p> <pre><code>ls ~/.pyenv/versions/\n</code></pre> <p>Disinstallare una versione di Python</p> <pre><code>pyenv uninstall &lt;version&gt;\n</code></pre> <p>Ogni volta che su windows (e altri sistemi operativi) si installa una nuova versione di Python con pyenv \u00e8 importante anche fare rehash</p> <pre><code>#rehash to update shims\npyenv rehash\n</code></pre>"},{"location":"learning/articles/gestire_versioni_python/#usare-una-versione-di-pyenv","title":"Usare una versione di Pyenv","text":"<pre><code>#Visualize the installed (available) versions\npyenv versions\n\n#Visualize the active version of python with pyenv\npyenv which python\n\n#Set a global pyenv version\npyenv global &lt;version&gt;\n\n#If you want to come back to the system default\npyenv global system\n</code></pre> <p>\u00c8 anche possibile impostare una versione di pyenv python locale per ogni progetto facendo all\u2019interno della cartella di progetto:</p> <pre><code>pyenv local &lt;version&gt;\n</code></pre> <p>Oppure impostare la versione di una determinata shell</p> <pre><code>pyenv shell &lt;version&gt;\n</code></pre> <p>IMPORTANTE IN WINDOWS 10 Dopo aver installato la versione di Python global di pyenv \u00e8 necessario eliminare dalla variabile di ambiente PATH i riferimenti al Python base installato inizialmente.</p>"},{"location":"learning/articles/gestire_versioni_python/#virtualenvs-con-pyenv","title":"Virtualenvs con pyenv","text":"<p>Pyenv ha un bellissimo plugin chiamato: pyenv-virtualenv che consente di gestire appunto i vari virtualenv in modo semplice.</p> <p>Ci sono diversi modi per gestire un virtualenv (pyenv consente di gestirli tutti e 3 in modo molto semplice e comodo)</p> <ul> <li>pyenv manages multiple versions of Python itself.</li> <li>virtualenv/venv manages virtual environments for a specific Python version.</li> <li>pyenv-virtualenv manages virtual environments for across varying versions of Python.</li> </ul> <p>Creare un virtualenv</p> <pre><code>pyenv virtualenv &lt;python_version&gt; &lt;environment_name&gt;\n\n#&lt;pythonversion&gt; is optional\n</code></pre> <p>Attivare un virtualenv</p> <pre><code>pyenv local myproject\n\n#verify python version\npyenv which python\n\n#verify pip version\npyenv which pip\n</code></pre> <p>\u00c8 quindi possibile attivare o disattivare un particolare ambiente (virtualenv) (un po' come succede con anaconda)</p> <pre><code>pyenv activate &lt;environment_name&gt;\n\npyenv deactivate\n</code></pre> <p>Con pyenv \u00e8 anche possibile utilizzare pi\u00f9 versioni di python contemporaneamente\u2026</p> <p>Bonus: utilizzare oh-my-zsh \u00c8 possibile utilizzare pyenv come plugin su oh-my-zsh in modo molto comodo inserendo pyenv all\u2019interno dei plugin nel file di configurazione.</p> <p>Informazione: Impedire a conda di partire di default</p> <pre><code>conda config --set auto_activate_base false\n</code></pre>"},{"location":"learning/articles/repl/","title":"REPL","text":"<p>REPL vuol dire: READ - EVAL - PRINT - LOOP.</p> <p>Si riferisce a tutti gli strumenti che consentono di aprire una versione di Python daterminale e in modo dinamico provare codice e vederne subito il risultato in modo interattivo.</p> <p>Python REPL che viene installato di default insieme alla versione di python \u00e8 carino, ma spesso molto basico e non conveniente da utilizzare per cose complicate.</p> <p>Ci sono alcune alternative, la pi\u00f9 comune e popolare \u00e8 certamente: iPython che \u00e8 lo stesso REPL che gira dietro a Jupyter Notebooks e consente di utilizzare appunto la scrittura a Notebook.</p> <p>Per installare e usare iPython \u00e8 possibile fare</p> <pre><code>pip install ipython\n#Oppure utilizzando pipx\npipx install ipython\n</code></pre> <p>Si raccomanda di utilizzare pipx perch\u00e8 \u00e8 uno di quelli strumenti che si vuole utilizzare globalmente perch\u00e8 serve principalmente per provare alcune funzioni o per fare alcuni test sul codice prima di scriverlo.</p>"},{"location":"learning/articles/repl/#vantaggi-di-ipython","title":"Vantaggi di iPython","text":"<ul> <li>Autocompletamento tramite tab</li> <li>highlight della sintassi</li> <li>Indentazione automatica</li> <li>Magic commands</li> <li>Tanto tanto altro</li> </ul>"},{"location":"learning/articles/struttura_progetto/","title":"Struttura di progetto","text":"<p>Come strutturare un progetto in Python?</p> <p>Questa ovviamente \u00e8 una domanda molto comune, ma allo stesso tempo molto difficile, non esiste una risposta corretta.</p> <p>Python non forza l\u2019utilizzo di una determinata struttura, tuttavia ci sono alcune best practice che \u00e8 possibile tenere a mente e alcune considerazioni che si possono (e spesso devono) fare.</p> <p>Un Modulo in Python \u00e8 un contenitore che racchiude tutte le vostre funzioni o classe che vi serve importare da un\u2019altra parte in modo da riciclare quello che avete scritto.</p> <p>Quando si lavora con i moduli e con altre librerie o codice la cosa pi\u00f9 importante \u00e8 prestare attenzione a due errori all\u2019interno di un progetto:</p> <ul> <li>ModuleNotFoundError: ovvero quando il file (modulo) che si cerca i importare non esiste o non \u00e8 raggiungibile</li> <li>ImportError: quando ci sono errori di circular imports</li> </ul> <p>Una cosa importante con Python \u00e8 che quando si importa un modulo Python cercher\u00e0 le dipendenze (i moduli che si vuole importare) in 3 posti:</p> <ol> <li>Installazione e dipendenze: ovvero tutte le default folders legate ai pacchetti pip installati</li> <li>Alcuni path addizionali specificati nella variabile d\u2019ambiente: PYTHONPATH</li> <li>Nella directory contenente gli script che si usano per invocare l\u2019interprete. In altre parole se si lancia <code>python ~/modulo/scripts/server.py</code> Python cercher\u00e0 i moduli da importare all\u2019interno di <code>~/modulo/scripts/</code></li> <li>Se si lancia una sessione interattiva con python (lanciando il comando <code>python</code> o <code>ipython</code>) verr\u00e0 utilizzata la directory dove ci si trova al momento del lancio del comando.</li> </ol> <p>Un modo efficace per verificare i path dove python cercher\u00e0 gli eventuali moduli \u00e8 fare:</p> <pre><code>import sys\nprint(sys.path)\n</code></pre> <p>Se si ottiene ModuleNotFoundError la prima cosa \u00e8 provare a lanciare il comando sopra per verificare se contiene le directory che si vuole utilizzare e che dovrebbero essere l\u00ec.</p> <p>In quel caso bisogna cercare di agire sugli import, sul PYTHONPATH per includere le proprie directory oppure provare a fare </p> <p><code>sys.path.append(\"/module/scripts\")</code> (\u00e8 un po' un trick, ma potrebbe aiutare a risolvere la soluzione).</p>"},{"location":"learning/articles/struttura_progetto/#import-relativi-e-assoluti","title":"Import relativi e assoluti","text":"<p>Esistono due modi (principali) per importare moduli in Python</p> <ul> <li>Import Assoluti: <code>from module/models/user import get_user</code></li> <li>Import Relativi: <code>from ..models/user import get_user</code> Entrambi i modi hanno vantaggi e svantaggi, personalmente consiglio l\u2019utilizzo di Import Assoluti perch\u00e8 sono pi\u00f9 facili da leggere e da utilizzare (rendendo il codice molto pi\u00f9 pulito e compilant).</li> </ul> <p>Anche perch\u00e8 se si usano import relativi \u00e8 possibile incappare in questo errore:</p> <p><code>Value Error: attempted relative import beyond top-level package</code></p> <p>Questo succede quando si cerca di importare qualcosa da una cartella al di fuori del progetto (Da una cartella padre al di fuori della root).</p> <p>Ci sono diversi modi per sistemare questo problema, ma il consiglio \u00e8 sempre lo stesso: cercate di utilizzare il pi\u00f9 possibile import assoluti.</p> <p> ATTENZIONE: NON USATE MAI LA * PER IMPORTARE FUNZIONI O MODULI </p>"},{"location":"learning/articles/struttura_progetto/#import-circolari","title":"Import circolari","text":"<p>Questo \u00e8 un problema molto grave in un progetto e l\u2019errore accade quando a partire da un modulo si cerca di importare l\u2019altro e viceversa (crendo appunto una circolarit\u00e0 negli import).</p> <pre><code># file_a.py\nfrom file_b import hello_world\n\ndef hello():\n    return \"hello\"\n\ndef first_program():\n    return hello_world()\n\nfirst_program()\n</code></pre> <pre><code># file_b.py\nfrom file_a import hello\n\ndef hello_world():\n\n    return hello() + \" world\"\n</code></pre> <p>Quando si lancia <code>python file_a.py</code> si avr\u00e0 il seguente errore:</p> <pre><code>Traceback (most recent call last):\n  File \"file_a.py\", line 1, in &lt;module&gt;\n    from file_b import hello_world\n  File \"/my_module/file_b.py\", line 2, in &lt;module&gt;\n    from file_a import hello\n  File \"/my_module/file_a.py\", line 1, in &lt;module&gt;\n    from file_b import hello_world\nImportError: cannot import name 'hello_world'\n</code></pre> <p>Ci sono anche qui molti modi per fixare questi problemi di import circolari, fate attenzione per\u00f2 a quando scrivete il codice in modo tale che non si verifichino questi problemi.</p>"},{"location":"learning/articles/struttura_progetto/#templating-cookiecutter","title":"Templating - Cookiecutter","text":"<p>Tornando al discorso originale di struttura di progetto in python (e in tanti altri linguaggi e/o framework) ogni progetto \u00e8 differente, ma alcuni progetti condividono tra di loro alcuni elementi comuni.</p> <p>Ad esempio spesso hanno un file con una lista di dipendenze e alcuni test, un\u2019applicazione web ha bisogno di un \u201cmain\u201d, oppure abbiamo bisogno per il nostro team di avere una struttura che guidi lo sviluppo in modo da uniformarci tra diversi progetti (o almeno cercare di farlo).</p> <p>Ecco qui che entra in gioco lo scaffolding .</p> <p>Scaffolding (in italiano: impalcatura) \u00e8 un concetto che arriva appunto dal settore delle costruzioni, quando vogliamo costruire qualcosa, ripararlo o modificarlo, abbiamo bisogno di un\u2019impalcatura attorno al progetto che aiuti a tenerlo.</p> <p>In Informatica questo concetto \u00e8 simile: prima di costruire un progetto abbiamo bisogno di una struttura pronta che ci consenta di procedere in modo ordinato durante lo sviluppo.</p> <p>Ecco quindi che entra in gioco: cookiecutter</p> <p>Cookiecutter \u00e8 uno strumento che consente di creare un progetto Python a partire da un template esistente (esistono versioni simili anche in tanti altri linguaggi di programmazione ed editor).</p> <p>Documentation: https://cookiecutter.readthedocs.io/en/stable/</p> <p>Per utilizzarlo:</p> <ol> <li>Si seleziona un template da utilizzare per il progetto</li> <li>Si lancia cookiecutter con l\u2019indirizzo del progetto e verranno chieste dal tool alcune domande per personalizzare la creazione del progetto</li> <li>Scaffolding con cookiecutter generer\u00e0 il template per voi</li> </ol> <p>Installiamo cookiecutter (meglio farlo con pipx in modo da usarlo globalmente dappertutto)</p> <pre><code>pipx install cookiecutter\n</code></pre> <p>Ecco un elenco curato di possibili templates per i vostri progetti (ne trovate molti online) https://github.com/cookiecutter/cookiecutter#a-pantry-full-of-cookiecutters</p> <p>Cookiecutter \u00e8 uno strumento molto utile, ma bisogna fare attenzione a come lo si usa e a quali progetti si utilizzano. Spesso pu\u00f2 installare e scaricare tantissime cose di cui non abbiamo bisogno o che sono ridondanti.</p> <p>Il consiglio \u00e8 di selezionare dei progetti che fanno per voi in base al progetto che state pensando di utilizzare (piccolo, medio, grande). Oppure scrivere dei template per i vostri progetti o organizzazione in modo da essere tutti d\u2019accordo su quello che volete fare.</p> <pre><code>#Cloniamo un progetto con cookiecutter\ncookiecutter https://github.com/audreyr/cookiecutter-pypackage\n</code></pre>"},{"location":"learning/articles/struttura_progetto/#bear-il-nostro-progetto-con-cookiecutter","title":"Bear - il nostro progetto con cookiecutter","text":"<p>La community di PythonBiellaGroup ha creato Bear (Base Environment for Any Reasonable project) un template progettuale basato su cookiecutter con cui \u00e9 possibile inizializzare i propri progetti tenendo conto di tutte le necessit\u00e0 che prevede una soluzione moderna in python.</p> <p>Trovate tutto qui \ud83d\udc47</p> <p>https://github.com/PythonBiellaGroup/Bear</p>"},{"location":"learning/articles/vs_code/","title":"VS Code","text":"<p>Un code editor \u00e8 lo strumento essenziale per ogni programmatore e lo strumento con cui spendiamo la maggior parte del tempo.</p> <p>La scelta di un editor con il quale scrivere codice \u00e8 spesso un tema molto sensibile che suscita spesso molte diatribe tra i programmatori.</p> <p>Come sapete ci sono moltissimi editor e siete liberi di utilizzare quello che pi\u00f9 vi piace, ma dopo diversi anni passati ad utilizzare Sublime Text e Pycharm vi suggerisco vivamente di utilizzare Visual Studio Code. (Non voglio aprire la parantesi EMACS o Vim altrimenti \u00e8 la fine..)</p>"},{"location":"learning/articles/vs_code/#perche-vs-code","title":"Perch\u00e8 VS Code?","text":"<p>Visual Studio Code \u00e8 negli ultimi anni l\u2019editor per la scrittura di codice pi\u00f9 utilizzato e sicuramente pi\u00f9 famoso Survey del 2022 di Stack Overflow</p> <p>Vediamo quindi assieme alcuni vantaggi nell\u2019usare vscode</p> <ul> <li>\u00c8 OpenSource</li> <li>Si pu\u00f2 usare su qualsiasi sistema operativo (anche via web come server)</li> <li>Potete usare tutti i linguaggi che volete</li> <li>\u00c8 semplice, ma altamente performante</li> <li>\u00c8 veloce</li> <li>\u00c8 estremamente customizzabile grazie a tantissime estensioni</li> <li>Viene impiegato in tantissimi contesti lavorativi</li> <li>\u00c8 largamente utilizzato e molto ben documentato</li> <li>Possibile fare sviluppo remoto</li> <li>\u00c8 possibile fare live coding e pairwase coding anche a distanza</li> <li>Le vostre estensioni e impostazioni possono essere sincronizzate tra diversi dispositivi</li> </ul> <p>Questi sono alcune delle mie considerazioni, ovviamente non ho benchmark rispetto altri editor sotto mano, vi invito comunque ad utilizzarlo e provarlo.</p> <p>Rispetto a Pycharm c\u2019\u00e8 per\u00f2 una feature che mi manca moltissimo durante lo sviluppo, ovvero la possibilit\u00e0 di fare refactoring del codice in molto smart come succede appunto su Pycharm. Pur troppo la fase di refactoring su vscode \u00e8 ancora spesso legata molto ad attivit\u00e0 manuali e non ci sono tutti gli automatismi necessari.</p> <p>La cosa che mi piace di pi\u00f9 di VSCode \u00e8 il giusto bilanciamento tra produttivit\u00e0 e facilit\u00e0, anche per chi inizia a scrivere codice.</p>"},{"location":"learning/articles/vs_code/#estensioni-suggerite","title":"Estensioni suggerite","text":"<p>Ecco un elenco di estensioni che suggeriamo con il loro ID di Visual Studio Store</p> <ul> <li>bookmarks: (alefragnani.bookmarks)</li> <li>code spell checkers (streetsidesoftware.code-spell-checker)</li> <li>docker (ms-azuretools.vscode-docker)</li> <li>docs-markdown (docsmsft.docs-markdown)</li> <li>docs-preview (docsmsft.docs-preview)</li> <li>docs-yaml (docsmsft.docs-yaml)</li> <li>git graph (mhutchie.git-graph)</li> <li>git history (donjayamanne.githistory)</li> <li>git lens (eamodio.gitlens)</li> <li>indent-rainbow (oderwat.indent-rainbow)</li> <li>italian-code spell checker (streetsidesoftware.code-spell-checker-italian)</li> <li>jupyter (ms-toolsai.jupyter)</li> <li>jupyter keymap (ms-toolsai.jupyter-keymap)</li> <li>live-share (ms-vsliveshare.vsliveshare)</li> <li>markdown all in one (yzhang.markdown-all-in-one)</li> <li>material icon theme (pkief.material-icon-theme)</li> <li>postgreSQL (ms-ossdata.vscode-postgresql)</li> <li>pylance (ms-python.vscode-pylance)</li> <li>python (ms-python.python)</li> <li>python docstring generator (njpwerner.autodocstring)</li> <li>python indent (kevinrose.vsc-python-indent)</li> <li>rainbow brackets (2gua.rainbow-brackets)</li> <li>rainbow csv (mechatroner.rainbow-csv)</li> <li>remote development (bundle) (ms-vscode-remote.vscode-remote-extensionpack)</li> <li>render line endings (medo64.render-crlf)</li> <li>sqltools (mtxr.sqltools)</li> <li>swagger viewer (arjun.swagger-viewer)</li> <li>todo highlight (wayou.vscode-todo-highlight)</li> <li>todo tree (gruntfuggly.todo-tree)</li> <li>visual studio intellicode (visualstudioexptteam.vscodeintellicode)</li> <li>webhint (webhint.vscode-webhint)</li> <li>yaml (redhat.vscode-yaml)</li> </ul> <p>Su VSCode segnaliamo anche altre configurazioni utili (che verranno discusse nelle sezioni precedenti) come:</p> <ul> <li>autosalvataggio automatico dei file</li> <li>uso flake8 come linter</li> <li>black come strumento per formattare automaticamente il codice al salvataggio</li> <li>bandit per controlli sulla sicurezza.</li> <li>devcontainers</li> <li>configurazioni del debugger</li> <li>configurazione dei virtual environments</li> <li>configurazioni per lo sviluppo remoto</li> </ul>"},{"location":"learning/articles/vs_code/#installare-un-linter","title":"Installare un linter","text":"<p>Come abbiamo visto i linter sono i vostri migliori amici per controllare, durante la scrittura del codice, che tutto sia ok.</p> <p>Per selezionare un linter andate nei comandi (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo <code>View &gt; Command Palette</code>) e scrivete: <code>&gt; python: Select Linter</code>. Selezionate quindi il linter che pi\u00f9 vi piace (vi consiglio flake 8 ).</p>"},{"location":"learning/articles/vs_code/#utilizzare-una-versione-di-python","title":"Utilizzare una versione di Python","text":"<p>Quando siete all\u2019interno di un progetto e aprite un file .py vi verr\u00e0 chiesto di utilizzare una particolare versione di python che potete anche visualizzarla in basso a destra su vscode (ovviamente dovete installare almeno l\u2019estensione Python prima). Premendo sulla scritta potrete selezionare una determinata versione di Python.</p> <p>Aprendo sempre la Command Palette (premendo il tasto F1 oppure CTRL + SHIFT + P o facendo <code>View &gt; Command Palette</code>) potete scrivere : <code>&gt; python: Select Interpreter</code> per selezionare l\u2019interprete python che pi\u00f9 vi aggrada (ad esempio il vostro .venv all\u2019interno della cartella).</p> <p>All\u2019interno del progetto potete anche creare un file: settings.json all\u2019interno della cartella .vscode in modo da specificare il path del vostro interprete</p> <pre><code>{\n  \"python.pythonPath\": \"/Users/jeydi/Progetti/mioprogetto/.venv/bin/python\"\n}\n</code></pre>"},{"location":"learning/articles/vs_code/#aggiungere-vs-code-al-terminale","title":"Aggiungere VS Code al terminale","text":"<p>Una feature molto interessante di visual studio code \u00e8 l\u2019aggiunta del comando <code>code &lt;file_or_folder&gt;</code> all\u2019interno del terminale che vi aprir\u00e0 una finestra di vscode in base al file o alla cartella su cui volete lavorare (ad esempio facendo <code>code .</code> potrete aprire la cartella corrente all\u2019interno di vscode).</p> <p>Per farlo aprite la Command Palette e lanciate (cercando) il seguente comando:</p> <pre><code>Shell command: Install \u2018code\u2019 command in the PATH\n</code></pre> <p>Su windows \u00e8 possibile installare la funzionalit\u00e0 anche flaggando <code>Add to PATH</code> durante la fase di installazione di vscode.</p>"},{"location":"learning/articles/vs_code/#usare-il-debugger","title":"Usare il debugger","text":"<p>Per usare il debugger su vscode e quindi lanciare diversi file \u00e8 possibile creare per ogni progetto una particolare configurazione di impostazioni che verranno utilizzate dal debugger.</p> <p>Inoltre VSCode quando andate sulla sezione di debug mette a disposizione uno strumento che consente di generare una particolare configurazione in base al framework o funzionalit\u00e0 che state cercando di usare tramite un template</p> <p>Con questa procedura verr\u00e0 costruito un file: launch.json all\u2019interno della directory di progetto: .vscode che potrebbe essere nascosta.</p> <p>Un esempio di configurazione (con flask e con un file singolo)</p> <pre><code>{\n// Use IntelliSense to learn about possible attributes.\n// Hover to view descriptions of existing attributes.\n// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"Python: Current File\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \"${file}\",\n\"console\": \"integratedTerminal\"\n},\n{\n\"name\": \"Flask Backend\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"port\": 8000,\n\"host\": \"localhost\",\n\"program\": \"${workspaceFolder}/server.py\",\n\"console\": \"integratedTerminal\",\n\"env\": {\n\"API_ENDPOINT_PORT\": \"8000\",\n\"VERBOSITY\": \"debug\",\n\"PLANT\": \"demo\"\n}\n}\n]\n}\n</code></pre>"},{"location":"learning/articles/vs_code/#testing","title":"Testing","text":"<p>Una feature nascosta all\u2019interno di VSCode una volta installata l\u2019estensione di Python \u00e8 la possibilit\u00e0 di eseguire test tramite interfaccia con Python.</p> <p>Per usufruire di questa funzionalit\u00e0: Aprire la Command Palette e fare: <code>Python: Configure Tests</code> e dall\u2019elenco dei framework di test che vi compariranno selezionare il vostro framework preferito (ad esempio pytest).</p>"},{"location":"learning/wiki/creare_un_package/","title":"Creare un package","text":""},{"location":"learning/wiki/creare_un_package/#cosa-sono-i-pacchetti-di-python","title":"Cosa sono i pacchetti di python?","text":"<p>Prima di spiegare come si pu\u00f2 creare un pacchetto di python (python package) \u00e8 importante definire cos\u2019\u00e8 in Python un pacchetto, cosa rappresenta, da cosa \u00e8 composto e soprattutto perch\u00e8 \u00e8 importante.</p>"},{"location":"learning/wiki/creare_un_package/#come-creare-un-pacchetto-python","title":"Come creare un pacchetto python?","text":"<p>Ci sono diversi modi per creare un pacchetto python, a seconda dello strumento che vogliamo configurare e che stiamo utilizzando all\u2019interno del nostro progetto.</p> <p>In questa guida vedremo principalmente 2 modi (con diverse accezioni):</p> <ul> <li>Utilizzando pip</li> <li>Utilizzando poetry</li> </ul>"},{"location":"meetup/","title":"Meetup in breve","text":"<p>\ud83d\udcc6 Ogni luned\u00ec sera alle ore 21.00 online (su Zoom)</p> <p>\ud83d\udde3 Speaker esperti del settore sia della nostra community che esterni</p> <p>\ud83d\udcf9 Tutti i video del meetup sono presenti sul canale YT di PBG</p> <p>\ud83d\udcda Il materiale (codice,slides,notebook) lo puoi trovare sulla nostra repository GitHub</p> <p>\ud83d\udcb0 Tutti gli eventi sono gratis</p>"},{"location":"meetup/#cosa-sono-i-meetup-di-pythonbiellagroup","title":"Cosa sono i Meetup di PythonBiellaGroup","text":"<p>Ogni settimana organizziamo un meetup su tematiche diverse legate al mondo di Python ma non solo. Ogni meetup ha la durata di circa 2 ore e avviene online su Zoom in modo da poter consentire a tutti di poter partecipare, ovunque essi siano.</p> <p>Il meetup viene poi registrato e reso disponibile su Youtube pochi giorni dopo la data del meetup affinch\u00e8 anche chi non ha potuto partecipare alla live possa riguardare integralmente l'evento. Chi ha poi partecipato alla live ma vuole approfondire o rivedere alcuni aspetti potr\u00e0 farlo con calma in qualsiasi momento.</p>"},{"location":"meetup/#cosa-devi-fare-per-partecipare","title":"Cosa devi fare per partecipare?","text":"<p>Tutti i nostri meetup vengono pubblicati sui nostri canali social la settimana precedente all'evento in modo che tu possa organizzarti con i tuoi impegni personali e possa partecipare.</p> <p>\u00a0\u00a0 \ud83d\udcec Seguici sui nostri canali social in modo da essere aggiornato su tutte le novit\u00e0 in arrivo</p> <p>\u00a0\u00a0 \ud83c\udf9f Nei post in cui annunciamo il prossimo evento troverai il link per il biglietto (gratuito) su Eventbrite in cui troverai anche link per connettersi al meetup che si svolger\u00e0 su Zoom</p> <p>\u00a0\u00a0 \ud83d\ude80 Connettiti alla live e goditi la serata!</p>"},{"location":"meetup/#vuoi-partecipare-come-speaker","title":"Vuoi partecipare come speaker?","text":"<p>Siamo sempre entusiasti di avere nuovi speaker per poter imparare cose nuove e permettere a tutti di condividere quello che si \u00e9 imparato durante il proprio percorso accdemico o lavorativo.</p> <ul> <li>Hai un progetto personale che hai svolto e vorresti condividere con la community?</li> <li>Hai scoperto una nuovo tool/libreria in python e vorresti parlarcene?</li> <li>Hai una startup che lavora nel mondo IT e vorresti mostrarci cosa fate?</li> <li>Hai un approccio innovativo ad un problema o tematica in particolare?</li> </ul> <p>Proponiti come speaker contattandoci Qui</p>"},{"location":"meetup/airflow_pyspark/","title":"Airflow + PySpark","text":""},{"location":"meetup/airflow_pyspark/#intro","title":"Intro","text":"<p>Apache Airflow \u00e8 ormai il tool open source di orchestrazione pi\u00f9 utilizzato e apprezzato nel mondo dati. Lo vediamo all'opera insieme a PySpark in un contesto enterprise legato alla realizzazione di soluzioni AI e data product.</p> <p>Con Luca Soato, lead data engineer in CARDO AI, esploreremo le features pi\u00f9 interessanti e quali sono le best practices per ottenere il massimo da questo strumento.</p>"},{"location":"meetup/airflow_pyspark/#materiale","title":"Materiale","text":"<p>\ud83d\udcda AirFlow https://airflow.apache.org/</p>"},{"location":"meetup/airflow_pyspark/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/antlr/","title":"ANTLR","text":""},{"location":"meetup/antlr/#antlr-primo-incontro","title":"ANTLR - primo incontro","text":"<p>Vediamo insieme ad Alessio Stalla di Strumenta ( https://strumenta.com/ ) il mondo dei parser, cercando di capire a cosa servono e come si scrivono. Scopriremo che con ANTLR4 ci baster\u00e0 scrivere la grammatica formale per generare ed usare il nostro parser. Questa \u00e8 la prima di tre serate sul fantastico mondo dei compilatori ed interpreti.</p> <p>Alessio lavora in Strumenta, specializzata in servizi di ingegneria linguistica per la creazione di DSL, linguaggi di programmazione, editor, compilatori, interpreti, debugger e simulatori.</p>"},{"location":"meetup/antlr/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Repository:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/tree/serata1</p> <p>\ud83d\udcda Slides:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/blob/serata1/slides/ANTLR-01.pdf</p> <p>\ud83d\udcda Sito ufficiale ANTLR4</p> <p>\u27a1\ufe0f https://www.antlr.org/</p> <p>\ud83d\udcda Provalo senza installazioni</p> <p>\u27a1\ufe0f http://lab.antlr.org/</p> <p>\ud83d\udcda Collezione di grammatiche per ANTLR4 relative ai principali linguaggi di programmazione </p> <p>\u27a1\ufe0f https://github.com/antlr/grammars-v4</p>"},{"location":"meetup/antlr/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/antlr/#antlr-secondo-incontro","title":"ANTLR - secondo incontro","text":"<p>Vediamo insieme a Federico Tomassetti di Strumenta ( https://strumenta.com/ ) i parser all'opera.</p> <p>Dopo una carrellata sui tipi di problemi che le applicazioni di Language Engineering risolvono, vediamo come nella maggior parte dei casi convenga partire da un Abstract Syntax Tree (usando Pylasu) anzich\u00e8 dal Parse Tree fornito da ANTLR; successivamente vediamo come scrivere un vero interprete, seguendo il codice di esempio che \u00e8 stato preparato.</p> <p>Federico \u00e8 il fondatore di Strumenta, specializzata in servizi di ingegneria linguistica per la creazione di DSL, linguaggi di programmazione, editor, compilatori, interpreti, debugger e simulatori.</p>"},{"location":"meetup/antlr/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Repository:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/</p> <p>\ud83d\udcda Slides:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/blob/main/slides/ANTLR-02.pdf</p> <p>\ud83d\udcda Pylasu</p> <p>\u27a1\ufe0f https://github.com/Strumenta/pylasu</p> <p>\ud83d\udcda Documentazione su Pylasu</p> <p>\u27a1\ufe0f https://starlasu.strumenta.com/</p> <p>\ud83d\udcda Strumenta community</p> <p>\u27a1\ufe0f https://strumenta.community/</p> <p>\ud83d\udcda ANTLR Mega Tutorial</p> <p>\u27a1\ufe0f https://tomassetti.me/antlr-mega-tutorial/</p>"},{"location":"meetup/antlr/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/antlr/#antlr-terzo-incontro","title":"ANTLR - terzo incontro","text":"<p>Vediamo insieme ad Alessio Stalla di Strumenta ( https://strumenta.com/ ) come generare codice, ovvero come si costruisce un compilatore o un transpiler. Partendo dalle differenze tra interprete e compilatori e da alcuni concetti \"fluidi\" che li riguardano, arriveremo alla generazione di codice attraverso un esempio di generatore di codice Python (quindi di alto livello). Vedremo un esempio di generazione tramite templating e un esempio tramite AST, o pi\u00f9 precisamente tramite CST, usando la libreria libcst creata e gestita da Istagram.</p> <p>Alessio \u00e8 un membro di Strumenta, specializzata in servizi di ingegneria linguistica per la creazione di DSL, linguaggi di programmazione, editor, compilatori, interpreti, debugger e simulatori.</p>"},{"location":"meetup/antlr/#materiale_2","title":"Materiale","text":"<p>\ud83d\udcda Repository:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/</p> <p>\ud83d\udcda Slides:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/ANTLR/blob/main/slides/ANTLR-03.pdf</p> <p>\ud83d\udcda Strumenta community:</p> <p>\u27a1\ufe0f https://strumenta.community/</p>"},{"location":"meetup/antlr/#video-del-meetup_2","title":"Video del meetup","text":""},{"location":"meetup/data_versioning/","title":"Data versioning","text":""},{"location":"meetup/data_versioning/#intro","title":"Intro","text":"<p>Luca Gilli, CTO e founder di Clearbox.AI, ci mostra come applicare i principi CI/CD ed in particolare il Data Versioning, al Machine Learning. Vediamo come testare automaticamente un modello, versionare i dati di input, parametri e risultati usando DVC e Git.</p>"},{"location":"meetup/data_versioning/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/gillus/DVC_Python_Biella</p>"},{"location":"meetup/data_versioning/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/debito_tecnico/","title":"Debito tecnico e architectural smell","text":""},{"location":"meetup/debito_tecnico/#intro","title":"Intro","text":"<p>Ogni progetto di sviluppo software porta con s\u00e8 un certo livello di  debito tecnico.  Ma che cosa si intende di preciso con debito tecnico?  Quali problemi porta con s\u00e8?  Esistono delle tecniche e dei tool per mitigarlo ed eventualmente adottare delle azioni correttive? Rispondiamo a questi quesiti con Ilaria Pigazzini e Darius Sas di Arcan. Nella seconda parte vediamo un esempio concreto con Python e un po' di live coding.</p>"},{"location":"meetup/debito_tecnico/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Prova Arcan https://www.arcan.tech/on-premise-trial/</p>"},{"location":"meetup/debito_tecnico/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/ds_pharma/","title":"Data Science - focus Pharma","text":""},{"location":"meetup/ds_pharma/#intro","title":"Intro","text":"<p>Parliamo di dati e come ricavarne valore in un ambito molto interessante e particolarmente complesso.  Andrea Grioni, data scientist in Novartis, ci mostrer\u00e0 come condurre un'analisi sui dati relativi a studi clinici e farmacologici e come avviene questo processo all'interno di un'azienda faramceutica</p>"},{"location":"meetup/ds_pharma/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/DataScience_Pharma</p>"},{"location":"meetup/ds_pharma/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/gioco_orso/","title":"Gioco dell'Orso","text":"<p>\ud83c\udfae https://pythonbiella.itch.io/orso</p>"},{"location":"meetup/gioco_orso/#primo-incontro","title":"Primo incontro","text":""},{"location":"meetup/gioco_orso/#intro","title":"Intro","text":"<p>In questo incontro Mario Nardi ci parla della riscoperta di un gioco antico di strategia, ritrovato a Forgnengo (frazione di Campiglia Cervo, in Valle Cervo, in provincia di Biella) descrivendo i passaggi che l'hanno portato in breve da incisione su pietra a gioco digitale, implementato, manco a dirlo, in Python con il contributo di molti membri della community.</p> <p>Abbiamo visto successivamente come pubblicare qualsiasi gioco sviluppato usando PyGame o PyGameZero usando la libreria helper Pygbag. Durante la serata \u00e8 stato pubblicato il mini-game Invasione: https://pythonbiella.itch.io/invasione che era stato sviluppato durante il percorso \"Imparare Python programmando giochi\".</p>"},{"location":"meetup/gioco_orso/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/Burlesco70/BearAndHuntersGame</p>"},{"location":"meetup/gioco_orso/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/gioco_orso/#secondo-incontro","title":"Secondo incontro","text":""},{"location":"meetup/gioco_orso/#intro_1","title":"Intro","text":"<p>Nella prima serata abbiamo ripercorso insieme la storia, le regole, l'implementazione a due giocatori e la pubblicazione sul web del gioco dell'orso. Il gioco \u00e8 disponibile come web app su itch.io e non necessita di alcuna installazione: https://pythonbiella.itch.io/orso</p> <p>In questo meetup, guidato da Angelo Huang, il focus sar\u00e0 sulla modellazione dei problemi in AI, utilizzando il gioco dell'orso come esempio. Vediamo nel dettaglio l'implementazione della AI nel gioco e i ragionamenti che sono stati implementati. Per finire, Angelo ci mostra la dimostrazione della correttezza dell'algoritmo.</p>"},{"location":"meetup/gioco_orso/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/Burlesco70/BearAndHuntersGame</p>"},{"location":"meetup/gioco_orso/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/github_actions/","title":"GitHub Actions","text":""},{"location":"meetup/github_actions/#intro","title":"Intro","text":"<p>In questo meetup vediamo come utilizzare le GitHub actions per poter automatizzare i nostri workflow di sviluppo.  Inoltre faremo qualche esempio pratico con Pipem, uno strumento per poter monitorare le pipeline di CI/CD. Incontro a cura di Mauro Sala e Luca Anghileri, di Pipem.</p>"},{"location":"meetup/github_actions/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github</p> <ul> <li> <p>https://github.com/maurosala/pbg-fastapi</p> </li> <li> <p>https://github.com/maurosala/pbg-action</p> </li> </ul> <p>\ud83d\udcda Pipem</p>"},{"location":"meetup/github_actions/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/gpt_detection_sys/","title":"GPT Detection system","text":""},{"location":"meetup/gpt_detection_sys/#intro","title":"Intro","text":"<p>GPT e Detection System, durante questa serata proveremo a rispondere alle seguenti domande:</p> <ul> <li> <p>Come funziona GPT e Chat GPT? Perch\u00e8 sono cos\u00ec importanti?</p> </li> <li> <p>Qual \u00e8 lo stato dell'arte attuale e quali sono gli strumenti pi\u00f9 importanti?</p> </li> <li> <p>Come si pu\u00f2 fare per identificare un testo generato da un algoritmo?</p> </li> <li> <p>Quali metodi e tecniche?</p> </li> </ul> <p>E molto molto altro!</p> <p>Serata a cura di Luca Gilli (Clearbox.ai) e Andrea Guzzo (MDPI).</p>"},{"location":"meetup/gpt_detection_sys/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/ChatGPT_Detection</p>"},{"location":"meetup/gpt_detection_sys/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/graphql/","title":"GraphQL e Strawberry","text":""},{"location":"meetup/graphql/#intro","title":"Intro","text":"<p>Dopo una breve introduzione generale sul linguaggio di interrogazione dati GraphQL, scopriamo come creare API GraphQL utilizzando Python e Strawberry. Lo facciamo con Patrick Arminio, il creatore della libreria e uno dei VIP italiani di Python, affrontando gli argomenti del workshop da lui preparato dal titolo \"GraphQL pronto per la produzione\"</p>"},{"location":"meetup/graphql/#materiale","title":"Materiale","text":"<p>\ud83d\udcda GraphQL</p> <p>\u27a1\ufe0f https://graphql.org/</p> <p>\ud83d\udcda Strawberry</p> <p>\u27a1\ufe0f https://strawberry.rocks/</p> <p>\ud83d\udcda Link ai contenuti del workshop</p> <p>\u27a1\ufe0f https://patrick91.github.io/strawberry-workshop/</p>"},{"location":"meetup/graphql/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/intro_docker/","title":"Intro","text":"<p>Scopriamo assieme il mondo di docker, docker compose docker swarm....</p> <p>Durante questa serata vedremo alcuni concetti teorici semplici e avanzati come networking, storage, immagini, docker-compose, docker swarm e molto altro...Andrea ci racconter\u00e0 della sua esperienza come Architetto in Be e come utilizza docker tutti i giorni per i suoi progetti. Vedremo inoltre esempi pratici e una soluzione completa in via di sviluppo a microservizi.</p> <p>Serate a cura di Andrea Amorosi.</p>"},{"location":"meetup/intro_docker/#docker-primo-incontro","title":"Docker - primo incontro","text":""},{"location":"meetup/intro_docker/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/Introduzione-a-Docker</p>"},{"location":"meetup/intro_docker/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/intro_docker/#docker-secondo-incontro","title":"Docker- secondo incontro","text":"<p>Seconda serata su Docker con Andrea Amorosi. Scopriamo assieme il mondo di docker, docker compose docker swarm....</p> <p>Durante questa serata vedremo alcuni concetti pi\u00f9 avanzati e ci sar\u00e0 un po' di hands-on e live coding sul progetto realizzato per questa serie di serate. Vedremo come costruire l'architettura docker e docker swarm del progetto con un po' di live debugging dell'applicazione python.</p>"},{"location":"meetup/intro_docker/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/Introduzione-a-Docker</p>"},{"location":"meetup/intro_docker/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/intro_kb8/","title":"Intro","text":"<p>Scopriamo le origini di Kubernetes e gli strumenti che lo hanno preceduto e reso possibile con Cesare Placanica, TelCo engineer @ Red Hat e organizzatore a Python Milano, nonch\u00e8 host del podcast Intervista Pythonista.</p>"},{"location":"meetup/intro_kb8/#kb8-primo-incontro","title":"KB8 - primo incontro","text":""},{"location":"meetup/intro_kb8/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Repo e slides della serata:</p> <p>\u27a1\ufe0f https://github.com/keobox/biella-night</p> <p>\u27a1\ufe0f https://nbviewer.org/github/keobox/biella-night/blob/main/Kubernetes.ipynb</p> <p>\ud83d\udcda Repository script demo sui containers:</p> <p>\u27a1\ufe0f https://github.com/keobox/biella-night/tree/main/demos/demos/containers</p> <p>\ud83d\udcda Link \"containers under the hood\":</p> <p>\u27a1\ufe0f https://linuxera.org/containers-under-the-hood/</p>"},{"location":"meetup/intro_kb8/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/intro_kb8/#kb8-secondo-incontro","title":"KB8 - secondo incontro","text":""},{"location":"meetup/intro_kb8/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Repo e notebook:</p> <p>\u27a1\ufe0f https://nbviewer.org/github/keobox/biella-night/blob/main/Kubernetes.ipynb</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/kubernetes-introduction</p>"},{"location":"meetup/intro_kb8/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/mlops_aws/","title":"MLOps - AWS","text":""},{"location":"meetup/mlops_aws/#mlops-introduzione-e-mlflow","title":"MLOps - Introduzione e MLFlow","text":"<p>Prima serata introduttiva al mondo MLOps con Luca Gilli di Clearbox.AI. Una overview dei concetti di base, un approfondimento di MLFlow e una demo.</p>"},{"location":"meetup/mlops_aws/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/MLOps/01</p>"},{"location":"meetup/mlops_aws/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/mlops_aws/#mlops-deploy-di-un-modello-ml-come-aws-lambda-faas","title":"MLOps - Deploy di un modello ML come AWS Lambda (FaaS)","text":"<p>Seconda serata di introduzione al mondo di MLOps con Luca Gilli di Clearbox.AI. Una pratica overview di Amazon AWS e un esempio completo di deploy di un modello di ML come funzione AWS Lambda, function as a server.</p>"},{"location":"meetup/mlops_aws/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/MLOps/02</p>"},{"location":"meetup/mlops_aws/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/modern_python_dev/","title":"Intro","text":"<p>In questa serie di due incontri andremo a presentare tutte le nuove librerie che permettono di produrre una soluzione in python che rispetta le best practices di scrittura di codice. Vedremo come gestire l'ambiente con pyenv, come gestire le dipendenze con poetry, strumenti di linting e alcune utilities di vs code.</p>"},{"location":"meetup/modern_python_dev/#modern-python-development-primo-incontro","title":"Modern python development - primo incontro","text":""},{"location":"meetup/modern_python_dev/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/ModernPythonDevelopment</p>"},{"location":"meetup/modern_python_dev/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/modern_python_dev/#modern-python-development-secondo-incontro","title":"Modern python development - secondo incontro","text":"<p>Quali sono gli strumenti moderni di Python per facilitare lo sviluppo? Come fare per organizzare un progetto e quali tool si possono usare per gestire le varie librerie? Vi piacerebbe poter integrare tutti gli strumenti moderni di Python scaricando un semplice cookiecutter template?</p> <p>Dopo pi\u00f9 di un anno dalla prima serata \"Modern Python\", vediamo insieme ad Andrea Guzzo come usare il nuovo cookiecutter template Bear e come integrare tutti i tool moderni di Python per la gestione delle dipendenze, del codice, della sicurezza e della documentazione.</p>"},{"location":"meetup/modern_python_dev/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Repository Bear cookiecutter:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/Bear</p>"},{"location":"meetup/modern_python_dev/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/nlp_topic_modeling/","title":"NLP - topic modeling","text":""},{"location":"meetup/nlp_topic_modeling/#intro","title":"Intro","text":"<p>Scopriamo assieme il mondo del Natural Language Processing e dei Topic Modelling. Una pratica overview dei modelli di Deep Learning, concetti e algoritmi che consentono di codificare parole, documenti e argomenti per compiere determinate attivit\u00e0.</p>"},{"location":"meetup/nlp_topic_modeling/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/</p>"},{"location":"meetup/nlp_topic_modeling/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/nvidia_triton/","title":"NVIDIA Triton","text":""},{"location":"meetup/nvidia_triton/#intro","title":"Intro","text":"<p>In questo incontro andiamo alla scoperta di NVIDIA Triton, uno strumento open source che permette la messa in produzione di modelli di machine learning.</p> <p>Con una semplice configurazione di un'immagine docker \u00e8 possibile creare un servizio di machine learning inference in grado di fare tutto quello che possiamo desiderare: servire modelli di tutti i maggiori framework python, scaling automatico, batching dinamico, aggiornamento online dei modelli, pipelines, metriche etc.</p>"},{"location":"meetup/nvidia_triton/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/nvidia-triton</p>"},{"location":"meetup/nvidia_triton/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/python_base/","title":"Intro","text":"<p>Hai sempre voluto imparare Python oppure ti piacerebbe fare un ripasso dei fondamentali? Allora questo ciclo di incontri fa per te!</p> <p>All'interno del percorso potrai trovare:</p> <ul> <li> <p>Teoria: Tutti gli aspetti teorici e materiale di apprendimento selezionato e realizzato da noi per l'apprendimento di Python</p> </li> <li> <p>Esercizi: elenco di esercizi che puoi realizzare per mettere in pratica gli aspetti teorici</p> </li> <li> <p>Progetti: suggerimento di alcuni progetti che puoi realizzare per migliorare le tue abilit\u00e0 di programmazione</p> </li> <li> <p>Esempi pratici: alcuni esempi pratici di codice realizzato da noi o a altre persone che hanno svolto esercizi e progetti</p> </li> </ul> <p>Per qualsiasi domanda, dubbio o perplessit\u00e0 contattaci all'interno dei nostri canali di comunicazione</p> <p>Speriamo con tutto il cuore che questo percorso possa esserti utile ed accompagnarti in questo bellissimo viaggio alla scoperta di Python e della programmazione.</p>"},{"location":"meetup/python_base/#python-base-primo-incontro","title":"Python Base - primo incontro","text":""},{"location":"meetup/python_base/#concetti-affrontati-durante-il-meetup","title":"Concetti affrontati durante il meetup","text":"<p>\u2b55\ufe0f Concetti base:</p> <ul> <li> <p>Espressioni</p> </li> <li> <p>Operatori e precedenza</p> </li> <li> <p>Variabili</p> </li> <li> <p>Statements</p> </li> </ul> <p>\u2b55\ufe0f Dati:</p> <ul> <li> <p>Tipi base</p> </li> <li> <p>Sequenze</p> </li> <li> <p>Liste</p> </li> <li> <p>Tuple</p> </li> <li> <p>Dizionari</p> </li> <li> <p>Insiemi</p> </li> </ul>"},{"location":"meetup/python_base/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/python_base/#python-base-secondo-incontro","title":"Python Base - secondo incontro","text":""},{"location":"meetup/python_base/#concetti-affrontati-durante-il-meetup_1","title":"Concetti affrontati durante il meetup","text":"<p>\u2b55\ufe0f Strutture di controllo:</p> <ul> <li> <p>Costrutti di selezione (if,match)</p> </li> <li> <p>Costrutti di iterazione (while,for)</p> </li> </ul> <p>\u2b55\ufe0f Funzioni:</p> <ul> <li> <p>Chiamate</p> </li> <li> <p>Side effects</p> </li> <li> <p>Argomenti</p> </li> <li> <p>Definire una funzione</p> </li> <li> <p>Argomenti \u201cKeyword\u201d</p> </li> <li> <p>Visibilit\u00e0 dei nomi</p> </li> <li> <p>Funzioni come parametri</p> </li> <li> <p>Funzioni annidate</p> </li> </ul>"},{"location":"meetup/python_base/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/python_base/#python-base-terzo-incontro","title":"Python Base - terzo incontro","text":""},{"location":"meetup/python_base/#concetti-affrontati-durante-il-meetup_2","title":"Concetti affrontati durante il meetup","text":"<p>\u2b55\ufe0f Classi:</p> <ul> <li> <p>Cosa sono</p> </li> <li> <p>Creare oggetti</p> </li> <li> <p>Usare variabili e metodi di istanza</p> </li> <li> <p>Definire classi</p> </li> <li> <p>Relazioni tra le classi</p> </li> <li> <p>Propriet\u00e0</p> </li> <li> <p>Ereditariet\u00e0</p> </li> </ul> <p>\u2b55\ufe0f Esercizi</p>"},{"location":"meetup/python_base/#video-del-meetup_2","title":"Video del meetup","text":""},{"location":"meetup/python_base/#python-base-quarto-incontro","title":"Python Base - quarto incontro","text":""},{"location":"meetup/python_base/#concetti-affrontati-durante-il-meetup_3","title":"Concetti affrontati durante il meetup","text":"<p>\u2b55\ufe0f Classi con concetti avanzati:</p> <ul> <li>Classi annidate</li> <li>Metodi speciali e statici</li> <li>Abstract classes</li> <li>Immutable</li> <li>Data classes</li> <li>File e context manager</li> <li>Iterable e generator</li> </ul> <p>\u2b55\ufe0f Esercizi</p>"},{"location":"meetup/python_base/#video-del-meetup_3","title":"Video del meetup","text":""},{"location":"meetup/rpa/","title":"Robotic Process Automation","text":""},{"location":"meetup/rpa/#intro","title":"Intro","text":"<p>In questo incontro Dario Chemello, ci introduce nel mondo della Robotic Process Automation e di come ci pu\u00f2 aiutare ad automatizzare i task ripetitivi ma frequenti che ci accompagnano nella nostra quotidianit\u00e0.  Come? Con Python manco a dirlo.</p>"},{"location":"meetup/rpa/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/squirrel_telegram_bot/","title":"Squirrel Telegram Bot","text":""},{"location":"meetup/squirrel_telegram_bot/#intro","title":"Intro","text":"<p>Oggi pi\u00f9 che mai ognuno di noi si trova ad interfacciarsi consciamente o inconsciamente con i bot i quali operano in diversi servizi tra cui applicazioni web, messagistica, videogiochi e customer care. </p> <p>Allora perch\u00e8 non creare il nostro bot telegram con Python?  E' quello che abbiamo provato a fare con i ragazzi della community di Squirrel Network </p>"},{"location":"meetup/squirrel_telegram_bot/#materiale","title":"Materiale","text":"<p>\ud83d\udc3f Squirrel Network: https://github.com/Squirrel-Network</p> <p>\ud83d\udce6 Pyrogram: https://docs.pyrogram.org/</p>"},{"location":"meetup/squirrel_telegram_bot/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/telegram_bot/","title":"Telegram Bot","text":""},{"location":"meetup/telegram_bot/#intro","title":"Intro","text":"<p>Angelo Moroni ci racconter\u00e0 come si pu\u00f2 realizzare un bot su telegram con python presentando un bellissimo caso di successo che ha realizzato.</p>"},{"location":"meetup/telegram_bot/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/TelegramBot</p>"},{"location":"meetup/telegram_bot/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/tensorflow_serving/","title":"Tensorflow serving","text":""},{"location":"meetup/tensorflow_serving/#intro","title":"Intro","text":"<p>TensorFlow Serving \u00e8 un tool che facilita la messa in produzione di un modello di ML trasformandolo automaticamente in una API... mostreremo un esempio concreto, partendo dall'installazione, l'addestramento ed il suo utilizzo tramite docker container. Serata a cura di Nicola Camardi.</p>"},{"location":"meetup/tensorflow_serving/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/IntroDeepLearning/TensorFlow_Serving</p>"},{"location":"meetup/tensorflow_serving/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/testare_dati/","title":"Testare e documentare i dati","text":""},{"location":"meetup/testare_dati/#intro","title":"Intro","text":"<p>Luca Gilli, CTO e founder di Clearbox.AI, ci fornisce suggerimenti su come rendere le nostre pipelines di dati piu' robuste tramite la scrittura di unit tests e documentazione, usando la libreria open-source great_expectations. Successivamente viene fatto un approfondimento su cosa voglia dire efficientare la creazione di test attraverso la profilazione del dato, condividendo l'esperienza acquisita durante lo sviluppo della libreria StructuredDataProfiling.</p>"},{"location":"meetup/testare_dati/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Meteriale della serata:</p> <p>\u27a1\ufe0f https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/TestareDocumentareDati</p> <p>\ud83d\udcda Repository great_expectations:</p> <p>\u27a1\ufe0f https://greatexpectations.io/</p> <p>\u27a1\ufe0f https://github.com/great-expectations/great_expectations</p> <p>\ud83d\udcda Repository StructuredDataProfiling:</p> <p>\u27a1\ufe0f https://github.com/Clearbox-AI/StructuredDataProfiling</p>"},{"location":"meetup/testare_dati/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/web_scraping/","title":"Web scraping","text":""},{"location":"meetup/web_scraping/#web-scraping-beautifulsoup-e-requests","title":"Web scraping - BeautifulSoup e Requests","text":"<p>Prima serata introduttiva al mondo MLOps con Luca Gilli di Clearbox.AI. Una overview dei concetti di base, un approfondimento di MLFlow e una demo.</p>"},{"location":"meetup/web_scraping/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/webScraping</p>"},{"location":"meetup/web_scraping/#video-del-meetup","title":"Video del meetup","text":""},{"location":"meetup/web_scraping/#web-scraping-selenium-e-scrapy","title":"Web scraping - Selenium e Scrapy","text":"<p>Seconda serata di approfondimento sul Web Scraping a cura di Stefano Bosisio con teoria, esempi e live coding</p>"},{"location":"meetup/web_scraping/#materiale_1","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/webScraping</p>"},{"location":"meetup/web_scraping/#video-del-meetup_1","title":"Video del meetup","text":""},{"location":"meetup/xgboost/","title":"XGBoost","text":""},{"location":"meetup/xgboost/#intro","title":"Intro","text":"<p>Alla scoperta di uno dei pi\u00f9 famosi modelli di Machine Learning con Marco Zamboni. Vediamo insieme le basi concettuali che stanno dietro a questo modello e le ragioni che lo rendono cos\u00ec \"di tendenza\".</p>"},{"location":"meetup/xgboost/#materiale","title":"Materiale","text":"<p>\ud83d\udcda Github: https://github.com/PythonBiellaGroup/MaterialeSerate/tree/master/XGBoost</p>"},{"location":"meetup/xgboost/#video-del-meetup","title":"Video del meetup","text":""},{"location":"supporters/","title":"Supporters","text":"<p>PythonBiellaGroup \u00e9 una community molto attiva su tutto il terriorio italiano e in questa sezione vogliamo ringraziare tutti gli amici che ci supportano e che noi supportiamo con i quali abbiamo il piacere di condividere interessi, iniziative e attivit\u00e0.</p>"},{"location":"supporters/#python-italia","title":"\ud83d\udc0d Python Italia","text":"<p>Python Italia \u00e9 la community pi\u00f9 importante in Italia per quanto riguarda il linguaggio di programmazione Python. Ogni anno organizzano il Pycon, l'evento di maggior rilievo a livello internazionale che permette l'incontro tra appassionati provenienti da tutto il mondo.</p> <p>Ovviamente la community di PythonBiellaGroup partecipa sempre. Ci vediamo l\u00e0? \ud83d\ude0e</p>"},{"location":"supporters/#python-milano","title":"\ud83d\udc09 Python Milano","text":"<p>Python Milano \u00e8 la community meneghina per eccellenza degli appassionati di Python. Oltre agli incontri ed eventi proposti dalla community segnaliamo anche Intervista Pythonista, un podcast che permette di dare voce a tutti i pythonisti italiani. Lo potete trovare su tutte le piattaforme!</p>"},{"location":"supporters/#theredcode","title":"\ud83c\udf92 TheRedCode","text":"<p>TheRedCode di Serena Sensini \u00e8 ormai un must read per tutti coloro che vogliono trovare tutorial, guide e interessanti articoli sulle ultime novit\u00e0 del mondo tech. Fateci un salto se non lo conoscete !</p>"},{"location":"supporters/#django-girls","title":"\ud83d\udc69 Django Girls","text":"<p>Django Girls \u00e8 una community nata a Berlino nel 2014 fondata da donne sviluppatrici con il supporto di tutta la comunit\u00e0 Django. La mission di Django Girls \u00e8 introdurre piu' diversity nel mondo della programmazione sopratutto grazie ai loro fantastici workshop.</p> <p>Le potete trovare anche al Pycon</p>"},{"location":"supporters/#clearbox-ai","title":"\ud83c\udf10 Clearbox AI","text":"<p>Clearbox AI \u00e8 un' azienda di Torino il cui core business \u00e8 la generazione di dati sintetici per realt\u00e0 di varia natura. Uno dei fondatori \u00e8 Luca Gilli, membro attivissimo della nostra community, che \u00e8 ormai una presenza fissa nei nostri meetup sia come auditore che come speaker.</p>"},{"location":"supporters/#sellalab","title":"\ud83c\udf0c SellaLab","text":"<p>SellaLab \u00e8 una piattaforma d\u2019innovazione, nata nel Gruppo Sella, rivolta a startup e imprese con l\u2019obiettivo di supportarne la crescita, i processi di open innovation e di trasformazione digitale. Organizziamo spesso insieme eventi con loro nei loro bellissimi spazi.</p> <p>Uno dei pi\u00f9 importanti \u00e8 senza dubbio il BiDigital. Non perdetevelo!</p>"},{"location":"supporters/#genropy","title":"\ud83d\udc7e Genropy","text":"<p>Genropy definisce un nuovo originale paradigma di programmazione, grazie al quale \u00e8 possibile creare in tempi rapidissimi applicazioni desktop-like attraverso una soluzione integrata, dalla GUI all\u2019ORM fino al deploy. In questo modo vengono forniti in modo semplice tutti gli strumenti necessari a creare e gestire una web app senza dover conoscere le specifiche caratteristiche implementative del database utilizzato (sqlite, postgres, mysql, microsoft sql ed oracle). Il framework si rivolge a persone che sviluppano e desiderano realizzare applicativi web, programmando in Python lato server e usando la sua sintassi lato client. Questo approccio consente di creare velocemente interfacce utente utilizzando al minimo HTML, CSS e Javascript.</p> <p>Anche i ragazzi di Genropy sono membri attivissimi della community! Correte a dare un' occhiata ai loro talk sul nostro canale Youtube</p>"},{"location":"supporters/#squirrel-network","title":"\ud83d\udc3f Squirrel Network","text":"<p>Squirrel Network \u00e8 una community che supporta e sviluppa progetti informatici open-source di varie dimensioni e utilit\u00e0. Particolrmente interessante il bot Nebula.</p>"}]}